const fs = require('fs');

const CLIEngine = require('eslint').CLIEngine;

const plugins = [
  ['@typescript-eslint', 'plugin:@typescript-eslint/all'],
  ['eslint', 'eslint:all'],
  ['jest', 'plugin:jest/all'],
  ['lodash', 'plugin:lodash/recommended'],
  ['lodash-fp', 'plugin:lodash-fp/recommended'],
  ['node', 'plugin:node/recommended'],
  ['react', 'plugin:react/all'],
  ['vue', 'plugin:vue/recommended'],
]

const schema = { };

plugins.forEach(plugin => {

  const cli = new CLIEngine({
    baseConfig: {
      plugins: [plugin[0]],
      extends: [plugin[1]]
    },
    useEslintrc: false
  });

  const rules = cli.getRules();

  const obj = { };
  rules.forEach((value, key) => {
    // TODO: we always get eslint:all -- why??
    if (plugin[1].startsWith('eslint:') || key.includes('/'))
      obj[key] = value;
  });

  schema[plugin[0]] = obj;

});

// NOTE: there are some well-known typos in plugin schemas
const normalized = JSON.stringify(schema, null, 2)
  .replace(/"onfOf"/gm, '"oneOf"')
  .replace(/"tyoe"/gm, '"type"');

const script = `
// autogenerated by bin/eslint-rules.ts
eslintRules = ${normalized}
`;

fs.writeFileSync('./src/assets/eslint-rules.js', script);
