import * as fs from 'fs';
import * as path from 'path';

import { meldConfigurations } from './common';
import { normalizeExtensionName } from './common';

const moduleLoader = require('module');

const extensions = [
  'eslint:recommended',
  'plugin:compat/recommended',
  'plugin:jest/recommended',
  'plugin:lodash/recommended',
  'plugin:lodash-fp/recommended',
  'plugin:node/recommended',
  'plugin:react/recommended',
  'plugin:react-hooks/recommended',
  'plugin:react-redux/recommended',
  'plugin:sonarjs/recommended',
  'plugin:unicorn/recommended',
  'plugin:vue/recommended',
  'plugin:@angular-eslint/recommended',
  'plugin:@typescript-eslint/eslint-recommended',
  'plugin:@typescript-eslint/recommended',
  'plugin:@typescript-eslint/recommended-requiring-type-checking'
];

const schema = { };

extensions.forEach(extensionName => {

  let config;
  if (extensionName === 'eslint:all')
    config = require('eslint/conf/eslint-all');
  else if (extensionName === 'eslint:recommended')
    config = require('eslint/conf/eslint-recommended');
  else {

    // load extension configuration
    const { configName, moduleName } = normalizeExtensionName(extensionName);
    const modulePath = moduleLoader.createRequire(__filename).resolve(moduleName);
    config = require(modulePath).configs[configName];

    // resolve extensions
    const resolveExtends = base => {
      if (base.extends) {
        if (!Array.isArray(base.extends))
          base.extends = [base.extends];
        base.extends.forEach(extensionName => {
          let extension;
          if (extensionName.startsWith('/'))
            extension = require(extensionName);
          else extension = require(path.join(path.dirname(modulePath), extensionName));
          if (extension.extends)
            resolveExtends(extension);
          meldConfigurations(config, extension);
        });
      }
    };

    resolveExtends(config);
    delete config.extends;
  }

  schema[extensionName] = config;

});

const normalized = JSON.stringify(schema, null, 2);

const script = `
  // autogenerated by bin/eslint-extensions.ts
  /* eslint-disable */
  eslintExtensions = ${normalized}
  `;

fs.writeFileSync('./src/assets/eslint-extensions.js', script);
