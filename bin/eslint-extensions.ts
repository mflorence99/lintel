(function() {

  const fs = require('fs');
  const path = require('path');

  const moduleLoader = require('module');

  const extensions = [
    'eslint:recommended',
    'plugin:compat/recommended',
    'plugin:jest/recommended',
    'plugin:lodash/recommended',
    'plugin:lodash-fp/recommended',
    'plugin:node/recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:react-redux/recommended',
    'plugin:sonarjs/recommended',
    'plugin:unicorn/recommended',
    'plugin:vue/recommended',
    'plugin:@angular-eslint/recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking'
  ];

  const schema = { };

  extensions.forEach(extensionName => {

    let config;
    if (extensionName === 'eslint:all')
      config = require('eslint/conf/eslint-all');
    else if (extensionName === 'eslint:recommended')
      config = require('eslint/conf/eslint-recommended');
    else {

      // load extension configuration
      const parts = extensionName.substring(7).split('/');
      let moduleName;
      if (parts[0].startsWith('@')) {
        moduleName = `${parts[0]}/eslint-plugin`;
        if (parts.length > 2)
          moduleName += `-${parts.slice(1, parts.length - 1).join('-')}`;
      } else moduleName = `eslint-plugin-${parts[0]}`;
      const configName = parts[parts.length - 1];
      const modulePath = moduleLoader.createRequire(__filename).resolve(moduleName);
      config = require(modulePath).configs[configName];

      // resolve extensions
      const resolveExtends = base => {
        if (base.extends) {
          if (!Array.isArray(base.extends))
            base.extends = [base.extends];
          base.extends.forEach(extensionName => {
            let extension;
            if (extensionName.startsWith('/'))
              extension = require(extensionName);
            else extension = require(path.join(path.dirname(modulePath), extensionName));
            if (extension.extends)
              resolveExtends(extension);
            Object.keys(extension)
              .filter(key => key !== 'extends')
              .forEach(key => {
                // TODO: this is really ugly but I need it in 3 places:
                // - bin/eslint-extensions.js - to generate extensions for testing
                // - ext/message-handler.ts - to generate extension for real
                // - src/../state/config.ts - to meld extensions together for a config
                // BUT ... not sure how to refactor
                if (Array.isArray(extension[key]))
                  config[key] = Array.from(new Set([...config[key] || [], ...extension[key]]));
                // NOTE rules are melded specially
                else if (key === 'rules') {
                  config['rules'] = config.rules || { };
                  Object.entries(extension.rules)
                    .map(([ruleName, rule]) => [ruleName, Array.isArray(rule) ? rule : [rule]] as any[])
                    .forEach(([ruleName, rule]) => {
                      if (!config.rules[ruleName] || (rule.length > 1))
                        config.rules[ruleName] = rule;
                      else config.rules[ruleName] = [rule[0], ...config.rules[ruleName].slice(1)];
                    });
                } else if (typeof extension[key] === 'object')
                  config[key] = Object.assign(config[key] || { }, extension[key]);
                else config[key] = extension[key];
              });
          });
        }
      };

      resolveExtends(config);
      delete config.extends;
    }

    schema[extensionName] = config;

  });

  const normalized = JSON.stringify(schema, null, 2);

  const script = `
  // autogenerated by bin/eslint-extensions.ts
  /* eslint-disable */
  eslintExtensions = ${normalized}
  `;

  fs.writeFileSync('./src/assets/eslint-extensions.js', script);

})();
