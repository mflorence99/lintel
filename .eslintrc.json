{
  "env": {
    "browser": true,
    "es2020": true,
    "jest": true,
    "node": true,
    "amd": false,
    "applescript": false,
    "atomtest": false,
    "commonjs": false,
    "embertest": false,
    "es2017": false,
    "es6": false,
    "greasemonkey": false,
    "jasmine": false,
    "jquery": false,
    "meteor": false,
    "mocha": false,
    "mongo": false,
    "nashorn": false,
    "phantomjs": false,
    "prototypejs": false,
    "protractor": false,
    "qunit": false,
    "serviceworker": false,
    "shared-node-browser": false,
    "shelljs": false,
    "webextensions": false,
    "worker": false
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  "ignorePatterns": [
    "*.js",
    "node_modules/"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2019,
    "project": [
      "./tsconfig.json"
    ],
    "sourceType": "module",
    "extraFileExtensions": null,
    "projectFolderIgnoreList": null,
    "tsconfigRootDir": null,
    "warnOnUnsupportedTypeScriptVersion": false,
    "ecmaFeatures": {
      "arrowFunctions": false,
      "binaryLiterals": false,
      "blockBindings": false,
      "classes": false,
      "defaultParams": false,
      "destructuring": false,
      "experimentalObjectRestSpread": false,
      "forOf": false,
      "generators": false,
      "globalReturn": false,
      "impliedStrict": false,
      "jsx": false,
      "modules": false,
      "objectLiteralComputedProperties": false,
      "objectLiteralDuplicateProperties": false,
      "objectLiteralShorthandMethods": false,
      "objectLiteralShorthandProperties": false,
      "octalLiterals": false,
      "regexUFlag": false,
      "regexYFlag": false,
      "restParams": false,
      "spread": false,
      "superInFunctions": false,
      "templateStrings": false,
      "unicodeCodePointEscapes": false
    }
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "reportUnusedDisableDirectives": true,
  "rules": {
    "@typescript-eslint/brace-style": "error",
    "@typescript-eslint/class-literal-property-style": [
      "error",
      "fields"
    ],
    "@typescript-eslint/comma-spacing": [
      "error",
      {
        "after": true,
        "before": false
      }
    ],
    "@typescript-eslint/default-param-last": [
      "error"
    ],
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": {
          "memberTypes": [
            "signature",
            "public-static-field",
            "protected-static-field",
            "private-static-field",
            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",
            "public-abstract-field",
            "protected-abstract-field",
            "private-abstract-field",
            "public-field",
            "protected-field",
            "private-field",
            "static-field",
            "instance-field",
            "abstract-field",
            "field",
            "public-constructor",
            "protected-constructor",
            "private-constructor",
            "constructor",
            "public-static-method",
            "protected-static-method",
            "private-static-method",
            "public-instance-method",
            "protected-instance-method",
            "private-instance-method",
            "public-abstract-method",
            "protected-abstract-method",
            "private-abstract-method",
            "public-method",
            "protected-method",
            "private-method",
            "static-method",
            "instance-method",
            "abstract-method",
            "method"
          ],
          "order": "alphabetically"
        }
      }
    ],
    "@typescript-eslint/method-signature-style": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "format": [
          "camelCase"
        ],
        "selector": "default"
      },
      {
        "format": [
          "camelCase",
          "UPPER_CASE"
        ],
        "selector": "variable"
      },
      {
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow",
        "selector": "parameter"
      },
      {
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow",
        "modifiers": [
          "private"
        ],
        "selector": "memberLike"
      },
      {
        "format": [
          "PascalCase"
        ],
        "selector": "typeLike"
      }
    ],
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-extra-non-null-assertion": [
      "error"
    ],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "ignoreRestSiblings": false,
        "vars": "all"
      }
    ],
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/quotes": [
      "error",
      "single"
    ],
    "@typescript-eslint/semi": [
      "error",
      "always"
    ],
    "@typescript-eslint/unbound-method": [
      "error",
      {
        "ignoreStatic": true
      }
    ],
    "brace-style": "error",
    "comma-spacing": "off",
    "default-param-last": "off",
    "eqeqeq": [
      "error",
      "smart"
    ],
    "func-call-spacing": "error",
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "after": true,
        "before": true
      }
    ],
    "no-empty": "off",
    "no-prototype-builtins": "off",
    "no-unused-vars": "off",
    "quotes": "off",
    "semi": "off",
    "space-before-blocks": [
      "error",
      "always"
    ],
    "space-before-function-paren": [
      "error",
      "never"
    ],
    "space-in-parens": [
      "error",
      "never"
    ],
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": [
      "error",
      "always"
    ]
  },
  "root": true
}