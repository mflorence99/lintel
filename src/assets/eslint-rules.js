
// autogenerated by bin/eslint-rules.ts
eslintRules = {
  "@typescript-eslint": {
    "@typescript-eslint/adjacent-overload-signatures": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Require that member overloads be consecutive",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.md"
        },
        "schema": [],
        "messages": {
          "adjacentSignature": "All '{{name}}' signatures should be adjacent."
        }
      }
    },
    "@typescript-eslint/array-type": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Requires using either `T[]` or `Array<T>` for arrays",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/array-type.md"
        },
        "fixable": "code",
        "messages": {
          "errorStringGeneric": "Array type using '{{type}}[]' is forbidden. Use 'Array<{{type}}>' instead.",
          "errorStringGenericSimple": "Array type using '{{type}}[]' is forbidden for non-simple types. Use 'Array<{{type}}>' instead.",
          "errorStringArray": "Array type using 'Array<{{type}}>' is forbidden. Use '{{type}}[]' instead.",
          "errorStringArraySimple": "Array type using 'Array<{{type}}>' is forbidden for simple types. Use '{{type}}[]' instead."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "default": {
                "enum": [
                  "array",
                  "generic",
                  "array-simple"
                ]
              },
              "readonly": {
                "enum": [
                  "array",
                  "generic",
                  "array-simple"
                ]
              }
            }
          }
        ]
      }
    },
    "@typescript-eslint/await-thenable": {
      "meta": {
        "docs": {
          "description": "Disallows awaiting a value that is not a Thenable",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/await-thenable.md"
        },
        "messages": {
          "await": "Unexpected `await` of a non-Promise (non-\"Thenable\") value."
        },
        "schema": [],
        "type": "problem"
      }
    },
    "@typescript-eslint/ban-ts-comment": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Bans `// @ts-<directive>` comments from being used",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/ban-ts-comment.md"
        },
        "messages": {
          "tsDirectiveComment": "Do not use \"// @ts-{{directive}}\" because it alters compilation errors."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ts-expect-error": {
                "type": "boolean",
                "default": true
              },
              "ts-ignore": {
                "type": "boolean",
                "default": true
              },
              "ts-nocheck": {
                "type": "boolean",
                "default": true
              },
              "ts-check": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/ban-ts-ignore": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Bans “// @ts-ignore” comments from being used",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/ban-ts-ignore.md"
        },
        "schema": [],
        "messages": {
          "tsIgnoreComment": "Do not use \"// @ts-ignore\" comments because they suppress compilation errors."
        },
        "deprecated": true,
        "replacedBy": [
          "ban-ts-comment"
        ]
      }
    },
    "@typescript-eslint/ban-types": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Bans specific types from being used",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/ban-types.md"
        },
        "fixable": "code",
        "messages": {
          "bannedTypeMessage": "Don't use '{{name}}' as a type.{{customMessage}}"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "types": {
                "type": "object",
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "fixWith": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "extendDefaults": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/brace-style": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Enforce consistent brace style for blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/brace-style.md"
        },
        "messages": {
          "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
          "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
          "blockSameLine": "Statement inside of curly braces should be on next line.",
          "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
          "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
          "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "1tbs",
              "stroustrup",
              "allman"
            ]
          },
          {
            "type": "object",
            "properties": {
              "allowSingleLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/camelcase": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce camelCase naming convention",
          "category": "Stylistic Issues",
          "recommended": "error",
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/camelcase.md"
        },
        "deprecated": true,
        "replacedBy": [
          "naming-convention"
        ],
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              },
              "ignoreImports": {
                "type": "boolean",
                "default": false
              },
              "properties": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "allow": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ],
                "minItems": 0,
                "uniqueItems": true
              },
              "genericType": {
                "enum": [
                  "always",
                  "never"
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "notCamelCase": "Identifier '{{name}}' is not in camel case."
        }
      }
    },
    "@typescript-eslint/class-name-casing": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Require PascalCased class and interface names",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/class-name-casing.md"
        },
        "deprecated": true,
        "replacedBy": [
          "naming-convention"
        ],
        "messages": {
          "notPascalCased": "{{friendlyName}} '{{name}}' must be PascalCased."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowUnderscorePrefix": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/class-literal-property-style": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Ensures that literals on classes are exposed in a consistent style",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/class-literal-property-style.md"
        },
        "fixable": "code",
        "messages": {
          "preferFieldStyle": "Literals should be exposed using readonly fields.",
          "preferGetterStyle": "Literals should be exposed using getters."
        },
        "schema": [
          {
            "enum": [
              "fields",
              "getters"
            ]
          }
        ]
      }
    },
    "@typescript-eslint/comma-spacing": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforces consistent spacing before and after commas",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/comma-spacing.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": false
              },
              "after": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "There should be no space {{loc}} ','.",
          "missing": "A space is required {{loc}} ','."
        }
      }
    },
    "@typescript-eslint/consistent-type-assertions": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "category": "Best Practices",
          "description": "Enforces consistent usage of type assertions",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/consistent-type-assertions.md"
        },
        "messages": {
          "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
          "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
          "never": "Do not use any type assertions.",
          "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }."
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "assertionStyle": {
                    "enum": [
                      "never"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "assertionStyle"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "assertionStyle": {
                    "enum": [
                      "as",
                      "angle-bracket"
                    ]
                  },
                  "objectLiteralTypeAssertions": {
                    "enum": [
                      "allow",
                      "allow-as-parameter",
                      "never"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "assertionStyle"
                ]
              }
            ]
          }
        ]
      }
    },
    "@typescript-eslint/consistent-type-definitions": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Consistent with type definition either `interface` or `type`",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/consistent-type-definitions.md"
        },
        "messages": {
          "interfaceOverType": "Use an `interface` instead of a `type`.",
          "typeOverInterface": "Use a `type` instead of an `interface`."
        },
        "schema": [
          {
            "enum": [
              "interface",
              "type"
            ]
          }
        ],
        "fixable": "code"
      }
    },
    "@typescript-eslint/default-param-last": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce default parameters to be last",
          "category": "Best Practices",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/default-param-last.md"
        },
        "schema": [],
        "messages": {
          "shouldBeLast": "Default parameters should be last."
        }
      }
    },
    "@typescript-eslint/dot-notation": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce dot notation whenever possible",
          "category": "Best Practices",
          "recommended": false,
          "extendsBaseRule": true,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/dot-notation.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowKeywords": {
                "type": "boolean",
                "default": true
              },
              "allowPattern": {
                "type": "string",
                "default": ""
              },
              "allowPrivateClassPropertyAccess": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "useDot": "[{{key}}] is better written in dot notation.",
          "useBrackets": ".{{key}} is a syntax error."
        }
      }
    },
    "@typescript-eslint/explicit-function-return-type": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Require explicit return types on functions and class methods",
          "category": "Stylistic Issues",
          "recommended": "warn",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/explicit-function-return-type.md"
        },
        "messages": {
          "missingReturnType": "Missing return type on function."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowExpressions": {
                "type": "boolean"
              },
              "allowTypedFunctionExpressions": {
                "type": "boolean"
              },
              "allowHigherOrderFunctions": {
                "type": "boolean"
              },
              "allowDirectConstAssertionInArrowFunctions": {
                "type": "boolean"
              },
              "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/explicit-member-accessibility": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Require explicit accessibility modifiers on class properties and methods",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/explicit-member-accessibility.md"
        },
        "fixable": "code",
        "messages": {
          "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
          "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "accessibility": {
                "enum": [
                  "explicit",
                  "no-public",
                  "off"
                ]
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "accessors": {
                    "enum": [
                      "explicit",
                      "no-public",
                      "off"
                    ]
                  },
                  "constructors": {
                    "enum": [
                      "explicit",
                      "no-public",
                      "off"
                    ]
                  },
                  "methods": {
                    "enum": [
                      "explicit",
                      "no-public",
                      "off"
                    ]
                  },
                  "properties": {
                    "enum": [
                      "explicit",
                      "no-public",
                      "off"
                    ]
                  },
                  "parameterProperties": {
                    "enum": [
                      "explicit",
                      "no-public",
                      "off"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "ignoredMethodNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/explicit-module-boundary-types": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md"
        },
        "messages": {
          "missingReturnType": "Missing return type on function.",
          "missingArgType": "Argument '{{name}}' should be typed."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowTypedFunctionExpressions": {
                "type": "boolean"
              },
              "allowHigherOrderFunctions": {
                "type": "boolean"
              },
              "allowDirectConstAssertionInArrowFunctions": {
                "type": "boolean"
              },
              "allowedNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "shouldTrackReferences": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/func-call-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Require or disallow spacing between function identifiers and their invocations",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/func-call-spacing.md"
        },
        "fixable": "whitespace",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowNewlines": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "unexpected": "Unexpected space or newline between function name and paren.",
          "missing": "Missing space between function name and paren."
        }
      }
    },
    "@typescript-eslint/generic-type-naming": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforces naming of generic type variables",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/generic-type-naming.md"
        },
        "deprecated": true,
        "replacedBy": [
          "naming-convention"
        ],
        "messages": {
          "paramNotMatchRule": "Type parameter {{name}} does not match rule {{rule}}."
        },
        "schema": [
          {
            "type": "string"
          }
        ]
      }
    },
    "@typescript-eslint/indent": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Enforce consistent indentation",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/indent.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "tab"
                ]
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "SwitchCase": {
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "VariableDeclarator": {
                "oneOf": [
                  {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "var": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "enum": [
                              "first",
                              "off"
                            ]
                          }
                        ]
                      },
                      "let": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "enum": [
                              "first",
                              "off"
                            ]
                          }
                        ]
                      },
                      "const": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "enum": [
                              "first",
                              "off"
                            ]
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "outerIIFEBody": {
                "type": "integer",
                "minimum": 0
              },
              "MemberExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "off"
                    ]
                  }
                ]
              },
              "FunctionDeclaration": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              "FunctionExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              "CallExpression": {
                "type": "object",
                "properties": {
                  "arguments": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              "ArrayExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first",
                      "off"
                    ]
                  }
                ]
              },
              "ObjectExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first",
                      "off"
                    ]
                  }
                ]
              },
              "ImportDeclaration": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first",
                      "off"
                    ]
                  }
                ]
              },
              "flatTernaryExpressions": {
                "type": "boolean",
                "default": false
              },
              "ignoredNodes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "not": {
                    "pattern": ":exit$"
                  }
                }
              },
              "ignoreComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
        }
      }
    },
    "@typescript-eslint/init-declarations": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow initialization in variable declarations",
          "category": "Variables",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/init-declarations.md"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "ignoreForLoopInit": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "initialized": "Variable '{{idName}}' should be initialized on declaration.",
          "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
        }
      }
    },
    "@typescript-eslint/interface-name-prefix": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Require that interface names should or should not prefixed with `I`",
          "category": "Stylistic Issues",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/interface-name-prefix.md"
        },
        "deprecated": true,
        "replacedBy": [
          "naming-convention"
        ],
        "messages": {
          "noPrefix": "Interface name must not be prefixed with \"I\".",
          "alwaysPrefix": "Interface name must be prefixed with \"I\"."
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "never",
                  "always"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "prefixWithI": {
                    "type": "string",
                    "enum": [
                      "never"
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "prefixWithI": {
                    "type": "string",
                    "enum": [
                      "always"
                    ]
                  },
                  "allowUnderscorePrefix": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "prefixWithI"
                ],
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "@typescript-eslint/keyword-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before and after keywords",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/keyword-spacing.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": true
              },
              "after": {
                "type": "boolean",
                "default": true
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "abstract": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "as": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "async": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "await": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "boolean": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "break": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "byte": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "case": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "catch": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "char": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "class": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "const": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "continue": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "debugger": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "default": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "delete": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "do": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "double": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "else": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "enum": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "export": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "extends": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "false": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "final": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "finally": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "float": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "for": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "from": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "function": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "get": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "goto": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "if": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "implements": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "import": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "in": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "instanceof": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "int": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "interface": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "let": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "long": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "native": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "new": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "null": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "of": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "package": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "private": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "protected": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "public": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "return": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "set": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "short": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "static": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "super": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "switch": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "synchronized": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "this": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "throw": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "throws": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "transient": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "true": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "try": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "typeof": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "var": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "void": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "volatile": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "while": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "with": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "yield": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedBefore": "Expected space(s) before \"{{value}}\".",
          "expectedAfter": "Expected space(s) after \"{{value}}\".",
          "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
          "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
        }
      }
    },
    "@typescript-eslint/member-delimiter-style": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Require a specific member delimiter style for interfaces and type literals",
          "category": "Stylistic Issues",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/member-delimiter-style.md"
        },
        "fixable": "code",
        "messages": {
          "unexpectedComma": "Unexpected separator (,).",
          "unexpectedSemi": "Unexpected separator (;).",
          "expectedComma": "Expected a comma.",
          "expectedSemi": "Expected a semicolon."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "multiline": {
                "type": "object",
                "properties": {
                  "delimiter": {
                    "enum": [
                      "none",
                      "semi",
                      "comma"
                    ]
                  },
                  "requireLast": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "singleline": {
                "type": "object",
                "properties": {
                  "delimiter": {
                    "enum": [
                      "semi",
                      "comma"
                    ]
                  },
                  "requireLast": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "interface": {
                    "type": "object",
                    "properties": {
                      "multiline": {
                        "type": "object",
                        "properties": {
                          "delimiter": {
                            "enum": [
                              "none",
                              "semi",
                              "comma"
                            ]
                          },
                          "requireLast": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      },
                      "singleline": {
                        "type": "object",
                        "properties": {
                          "delimiter": {
                            "enum": [
                              "semi",
                              "comma"
                            ]
                          },
                          "requireLast": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "typeLiteral": {
                    "type": "object",
                    "properties": {
                      "multiline": {
                        "type": "object",
                        "properties": {
                          "delimiter": {
                            "enum": [
                              "none",
                              "semi",
                              "comma"
                            ]
                          },
                          "requireLast": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      },
                      "singleline": {
                        "type": "object",
                        "properties": {
                          "delimiter": {
                            "enum": [
                              "semi",
                              "comma"
                            ]
                          },
                          "requireLast": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/member-naming": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforces naming conventions for class members by visibility",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/member-naming.md"
        },
        "deprecated": true,
        "replacedBy": [
          "naming-convention"
        ],
        "messages": {
          "incorrectName": "{{accessibility}} property {{name}} should match {{convention}}."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "public": {
                "type": "string",
                "minLength": 1,
                "format": "regex"
              },
              "protected": {
                "type": "string",
                "minLength": 1,
                "format": "regex"
              },
              "private": {
                "type": "string",
                "minLength": 1,
                "format": "regex"
              }
            },
            "additionalProperties": false,
            "minProperties": 1
          }
        ]
      }
    },
    "@typescript-eslint/member-ordering": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Require a consistent member declaration order",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/member-ordering.md"
        },
        "messages": {
          "incorrectOrder": "Member \"{{member}}\" should be declared before member \"{{beforeMember}}\".",
          "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "default": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "never"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "enum": [
                        "signature",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "private-abstract-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "private-abstract-method",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor"
                      ]
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "memberTypes": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "enum": [
                                "signature",
                                "field",
                                "public-field",
                                "public-decorated-field",
                                "decorated-field",
                                "static-field",
                                "public-static-field",
                                "instance-field",
                                "public-instance-field",
                                "abstract-field",
                                "public-abstract-field",
                                "protected-field",
                                "protected-decorated-field",
                                "protected-static-field",
                                "protected-instance-field",
                                "protected-abstract-field",
                                "private-field",
                                "private-decorated-field",
                                "private-static-field",
                                "private-instance-field",
                                "private-abstract-field",
                                "method",
                                "public-method",
                                "public-decorated-method",
                                "decorated-method",
                                "static-method",
                                "public-static-method",
                                "instance-method",
                                "public-instance-method",
                                "abstract-method",
                                "public-abstract-method",
                                "protected-method",
                                "protected-decorated-method",
                                "protected-static-method",
                                "protected-instance-method",
                                "protected-abstract-method",
                                "private-method",
                                "private-decorated-method",
                                "private-static-method",
                                "private-instance-method",
                                "private-abstract-method",
                                "constructor",
                                "public-constructor",
                                "protected-constructor",
                                "private-constructor"
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "enum": [
                              "never"
                            ]
                          }
                        ]
                      },
                      "order": {
                        "type": "string",
                        "enum": [
                          "alphabetically",
                          "as-written"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "classes": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "never"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "enum": [
                        "signature",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "private-abstract-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "private-abstract-method",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor"
                      ]
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "memberTypes": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "enum": [
                                "signature",
                                "field",
                                "public-field",
                                "public-decorated-field",
                                "decorated-field",
                                "static-field",
                                "public-static-field",
                                "instance-field",
                                "public-instance-field",
                                "abstract-field",
                                "public-abstract-field",
                                "protected-field",
                                "protected-decorated-field",
                                "protected-static-field",
                                "protected-instance-field",
                                "protected-abstract-field",
                                "private-field",
                                "private-decorated-field",
                                "private-static-field",
                                "private-instance-field",
                                "private-abstract-field",
                                "method",
                                "public-method",
                                "public-decorated-method",
                                "decorated-method",
                                "static-method",
                                "public-static-method",
                                "instance-method",
                                "public-instance-method",
                                "abstract-method",
                                "public-abstract-method",
                                "protected-method",
                                "protected-decorated-method",
                                "protected-static-method",
                                "protected-instance-method",
                                "protected-abstract-method",
                                "private-method",
                                "private-decorated-method",
                                "private-static-method",
                                "private-instance-method",
                                "private-abstract-method",
                                "constructor",
                                "public-constructor",
                                "protected-constructor",
                                "private-constructor"
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "enum": [
                              "never"
                            ]
                          }
                        ]
                      },
                      "order": {
                        "type": "string",
                        "enum": [
                          "alphabetically",
                          "as-written"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "classExpressions": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "never"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "enum": [
                        "signature",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "private-abstract-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "private-abstract-method",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor"
                      ]
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "memberTypes": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "enum": [
                                "signature",
                                "field",
                                "public-field",
                                "public-decorated-field",
                                "decorated-field",
                                "static-field",
                                "public-static-field",
                                "instance-field",
                                "public-instance-field",
                                "abstract-field",
                                "public-abstract-field",
                                "protected-field",
                                "protected-decorated-field",
                                "protected-static-field",
                                "protected-instance-field",
                                "protected-abstract-field",
                                "private-field",
                                "private-decorated-field",
                                "private-static-field",
                                "private-instance-field",
                                "private-abstract-field",
                                "method",
                                "public-method",
                                "public-decorated-method",
                                "decorated-method",
                                "static-method",
                                "public-static-method",
                                "instance-method",
                                "public-instance-method",
                                "abstract-method",
                                "public-abstract-method",
                                "protected-method",
                                "protected-decorated-method",
                                "protected-static-method",
                                "protected-instance-method",
                                "protected-abstract-method",
                                "private-method",
                                "private-decorated-method",
                                "private-static-method",
                                "private-instance-method",
                                "private-abstract-method",
                                "constructor",
                                "public-constructor",
                                "protected-constructor",
                                "private-constructor"
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "enum": [
                              "never"
                            ]
                          }
                        ]
                      },
                      "order": {
                        "type": "string",
                        "enum": [
                          "alphabetically",
                          "as-written"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "interfaces": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "never"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "enum": [
                        "signature",
                        "field",
                        "method",
                        "constructor"
                      ]
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "memberTypes": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "enum": [
                                "signature",
                                "field",
                                "method",
                                "constructor"
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "enum": [
                              "never"
                            ]
                          }
                        ]
                      },
                      "order": {
                        "type": "string",
                        "enum": [
                          "alphabetically",
                          "as-written"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "typeLiterals": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "never"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "enum": [
                        "signature",
                        "field",
                        "method",
                        "constructor"
                      ]
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "memberTypes": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "enum": [
                                "signature",
                                "field",
                                "method",
                                "constructor"
                              ]
                            }
                          },
                          {
                            "type": "string",
                            "enum": [
                              "never"
                            ]
                          }
                        ]
                      },
                      "order": {
                        "type": "string",
                        "enum": [
                          "alphabetically",
                          "as-written"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/method-signature-style": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforces using a particular method signature syntax.",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/method-signature-style.md"
        },
        "fixable": "code",
        "messages": {
          "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
          "errorProperty": "Function property signature is forbidden. Use a method shorthand instead."
        },
        "schema": [
          {
            "enum": [
              "property",
              "method"
            ]
          }
        ]
      }
    },
    "@typescript-eslint/naming-convention": {
      "meta": {
        "docs": {
          "category": "Variables",
          "description": "Enforces naming conventions for everything across a codebase",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/naming-convention.md"
        },
        "type": "suggestion",
        "messages": {
          "unexpectedUnderscore": "{{type}} name {{name}} must not have a {{position}} underscore.",
          "missingUnderscore": "{{type}} name {{name}} must have a {{position}} underscore.",
          "missingAffix": "{{type}} name {{name}} must have one of the following {{position}}es: {{affixes}}",
          "satisfyCustom": "{{type}} name {{name}} must {{regexMatch}} the RegExp: {{regex}}",
          "doesNotMatchFormat": "{{type}} name {{name}} must match one of the following formats: {{formats}}"
        },
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "default"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "readonly",
                        "static",
                        "public",
                        "protected",
                        "private",
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "variableLike"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "variable"
                    ]
                  },
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "function"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "parameter"
                    ]
                  },
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "memberLike"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "private",
                        "protected",
                        "public",
                        "static",
                        "readonly",
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "property"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "private",
                        "protected",
                        "public",
                        "static",
                        "readonly",
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  },
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "parameterProperty"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "private",
                        "protected",
                        "public",
                        "readonly"
                      ]
                    },
                    "additionalItems": false
                  },
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "method"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "private",
                        "protected",
                        "public",
                        "static",
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "accessor"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "private",
                        "protected",
                        "public",
                        "static",
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  },
                  "types": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "enumMember"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "typeLike"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "class"
                    ]
                  },
                  "modifiers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "abstract"
                      ]
                    },
                    "additionalItems": false
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "interface"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "typeAlias"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "enum"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "format": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "camelCase",
                            "strictCamelCase",
                            "PascalCase",
                            "StrictPascalCase",
                            "snake_case",
                            "UPPER_CASE"
                          ]
                        },
                        "additionalItems": false
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "custom": {
                    "type": "object",
                    "properties": {
                      "match": {
                        "type": "boolean"
                      },
                      "regex": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "match",
                      "regex"
                    ]
                  },
                  "leadingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "trailingUnderscore": {
                    "type": "string",
                    "enum": [
                      "forbid",
                      "allow",
                      "require"
                    ]
                  },
                  "prefix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "suffix": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1
                    },
                    "additionalItems": false
                  },
                  "filter": {
                    "oneOf": [
                      {
                        "type": "string",
                        "minLength": 1
                      },
                      {
                        "type": "object",
                        "properties": {
                          "match": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "match",
                          "regex"
                        ]
                      }
                    ]
                  },
                  "selector": {
                    "type": "string",
                    "enum": [
                      "typeParameter"
                    ]
                  }
                },
                "required": [
                  "selector",
                  "format"
                ],
                "additionalProperties": false
              }
            ]
          },
          "additionalItems": false
        }
      }
    },
    "@typescript-eslint/no-array-constructor": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow generic `Array` constructors",
          "category": "Stylistic Issues",
          "recommended": "error",
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-array-constructor.md"
        },
        "fixable": "code",
        "messages": {
          "useLiteral": "The array literal notation [] is preferable."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-base-to-string": {
      "meta": {
        "docs": {
          "description": "Requires that `.toString()` is only called on objects which provide useful information when stringified",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-base-to-string.md"
        },
        "messages": {
          "baseToString": "'{{name}} {{certainty}} evaluate to '[object Object]' when stringified."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreTaggedTemplateExpressions": {
                "type": "boolean",
                "default": true
              },
              "ignoredTypeNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-dupe-class-members": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow duplicate class members",
          "category": "Possible Errors",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-dupe-class-members.md"
        },
        "schema": [],
        "messages": {
          "unexpected": "Duplicate name '{{name}}'."
        }
      }
    },
    "@typescript-eslint/no-dynamic-delete": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow the delete operator with computed key expressions",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-dynamic-delete.md"
        },
        "fixable": "code",
        "messages": {
          "dynamicDelete": "Do not delete dynamically computed property keys."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-empty-function": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow empty functions",
          "category": "Best Practices",
          "recommended": "error",
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-empty-function.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "enum": [
                    "functions",
                    "arrowFunctions",
                    "generatorFunctions",
                    "methods",
                    "generatorMethods",
                    "getters",
                    "setters",
                    "constructors",
                    "private-constructors",
                    "protected-constructors"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Unexpected empty {{name}}."
        }
      }
    },
    "@typescript-eslint/no-empty-interface": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the declaration of empty interfaces",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-empty-interface.md"
        },
        "fixable": "code",
        "messages": {
          "noEmpty": "An empty interface is equivalent to `{}`.",
          "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
        },
        "schema": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowSingleExtends": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "@typescript-eslint/no-explicit-any": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow usage of the `any` type",
          "category": "Best Practices",
          "recommended": "warn",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-explicit-any.md"
        },
        "fixable": "code",
        "messages": {
          "unexpectedAny": "Unexpected any. Specify a different type.",
          "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
          "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
        },
        "schema": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fixToUnknown": {
                "type": "boolean"
              },
              "ignoreRestArgs": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "@typescript-eslint/no-extra-non-null-assertion": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow extra non-null assertion",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md"
        },
        "fixable": "code",
        "schema": [],
        "messages": {
          "noExtraNonNullAssertion": "Forbidden extra non-null assertion."
        }
      }
    },
    "@typescript-eslint/no-extra-parens": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Disallow unnecessary parentheses",
          "category": "Possible Errors",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-extra-parens.md"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "functions"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "all"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "conditionalAssign": {
                      "type": "boolean"
                    },
                    "nestedBinaryExpressions": {
                      "type": "boolean"
                    },
                    "returnAssign": {
                      "type": "boolean"
                    },
                    "ignoreJSX": {
                      "enum": [
                        "none",
                        "all",
                        "single-line",
                        "multi-line"
                      ]
                    },
                    "enforceForArrowConditionals": {
                      "type": "boolean"
                    },
                    "enforceForSequenceExpressions": {
                      "type": "boolean"
                    },
                    "enforceForNewInMemberExpressions": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "unexpected": "Unnecessary parentheses around expression."
        }
      }
    },
    "@typescript-eslint/no-extra-semi": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary semicolons",
          "category": "Possible Errors",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-extra-semi.md"
        },
        "fixable": "code",
        "schema": [],
        "messages": {
          "unexpected": "Unnecessary semicolon."
        }
      }
    },
    "@typescript-eslint/no-extraneous-class": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Forbids the use of classes as namespaces",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-extraneous-class.md"
        },
        "schema": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowConstructorOnly": {
                "type": "boolean"
              },
              "allowEmpty": {
                "type": "boolean"
              },
              "allowStaticOnly": {
                "type": "boolean"
              },
              "allowWithDecorator": {
                "type": "boolean"
              }
            }
          }
        ],
        "messages": {
          "empty": "Unexpected empty class.",
          "onlyStatic": "Unexpected class with only static properties.",
          "onlyConstructor": "Unexpected class with only a constructor."
        }
      }
    },
    "@typescript-eslint/no-floating-promises": {
      "meta": {
        "docs": {
          "description": "Requires Promise-like values to be handled appropriately",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-floating-promises.md"
        },
        "messages": {
          "floating": "Promises must be handled appropriately.",
          "floatingVoid": "Promises must be handled appropriately or explicitly marked as ignored with the `void` operator.",
          "floatingFixVoid": "Add void operator to ignore."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreVoid": {
                "type": "boolean"
              },
              "ignoreIIFE": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "problem"
      }
    },
    "@typescript-eslint/no-for-in-array": {
      "meta": {
        "docs": {
          "description": "Disallow iterating over an array with a for-in loop",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-for-in-array.md"
        },
        "messages": {
          "forInViolation": "For-in loops over arrays are forbidden. Use for-of or array.forEach instead."
        },
        "schema": [],
        "type": "problem"
      }
    },
    "@typescript-eslint/no-implied-eval": {
      "meta": {
        "docs": {
          "description": "Disallow the use of `eval()`-like methods",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-implied-eval.md"
        },
        "messages": {
          "noImpliedEvalError": "Implied eval. Consider passing a function.",
          "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-inferrable-types": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-inferrable-types.md"
        },
        "fixable": "code",
        "messages": {
          "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreParameters": {
                "type": "boolean"
              },
              "ignoreProperties": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/no-invalid-this": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `this` keywords outside of classes or class-like objects",
          "category": "Best Practices",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-invalid-this.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "capIsConstructor": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/no-invalid-void-type": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows usage of `void` type outside of generic or return types",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-invalid-void-type.md"
        },
        "messages": {
          "invalidVoidForGeneric": "{{ generic }} may not have void as a type variable",
          "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type variable",
          "invalidVoidNotReturn": "void is only valid as a return type"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowInGenericTypeArguments": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minLength": 1
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/no-magic-numbers": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow magic numbers",
          "category": "Best Practices",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-magic-numbers.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "detectObjects": {
                "type": "boolean",
                "default": false
              },
              "enforceConst": {
                "type": "boolean",
                "default": false
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "uniqueItems": true
              },
              "ignoreArrayIndexes": {
                "type": "boolean",
                "default": false
              },
              "ignoreNumericLiteralTypes": {
                "type": "boolean"
              },
              "ignoreEnums": {
                "type": "boolean"
              },
              "ignoreReadonlyClassProperties": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "useConst": "Number constants declarations must use 'const'.",
          "noMagic": "No magic number: {{raw}}."
        }
      }
    },
    "@typescript-eslint/no-misused-new": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Enforce valid definition of `new` and `constructor`",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-misused-new.md"
        },
        "schema": [],
        "messages": {
          "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
          "errorMessageClass": "Class cannot have method named `new`."
        }
      }
    },
    "@typescript-eslint/no-misused-promises": {
      "meta": {
        "docs": {
          "description": "Avoid using promises in places not designed to handle them",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-misused-promises.md"
        },
        "messages": {
          "voidReturn": "Promise returned in function argument where a void return was expected.",
          "conditional": "Expected non-Promise value in a boolean conditional."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "checksConditionals": {
                "type": "boolean"
              },
              "checksVoidReturn": {
                "type": "boolean"
              }
            }
          }
        ],
        "type": "problem"
      }
    },
    "@typescript-eslint/no-namespace": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of custom TypeScript modules and namespaces",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-namespace.md"
        },
        "messages": {
          "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over custom TypeScript modules and namespaces."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowDeclarations": {
                "type": "boolean"
              },
              "allowDefinitionFiles": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/no-non-null-asserted-optional-chain": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows using a non-null assertion after an optional chain expression",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.md"
        },
        "messages": {
          "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
          "suggestRemovingNonNull": "You should remove the non-null assertion."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-non-null-assertion": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows non-null assertions using the `!` postfix operator",
          "category": "Stylistic Issues",
          "recommended": "warn",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-non-null-assertion.md"
        },
        "messages": {
          "noNonNull": "Forbidden non-null assertion.",
          "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-parameter-properties": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow the use of parameter properties in class constructors",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-parameter-properties.md"
        },
        "messages": {
          "noParamProp": "Property {{parameter}} cannot be declared in the constructor."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allows": {
                "type": "array",
                "items": {
                  "enum": [
                    "readonly",
                    "private",
                    "protected",
                    "public",
                    "private readonly",
                    "protected readonly",
                    "public readonly"
                  ]
                },
                "minItems": 1
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/no-require-imports": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows invocation of `require()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-require-imports.md"
        },
        "schema": [],
        "messages": {
          "noRequireImports": "A `require()` style import is forbidden."
        }
      }
    },
    "@typescript-eslint/no-this-alias": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow aliasing `this`",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-this-alias.md"
        },
        "schema": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "allowDestructuring": {
                "type": "boolean"
              },
              "allowedNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "messages": {
          "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
          "thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
        }
      }
    },
    "@typescript-eslint/no-throw-literal": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow throwing literals as exceptions",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-throw-literal.md"
        },
        "schema": [],
        "messages": {
          "object": "Expected an error object to be thrown.",
          "undef": "Do not throw undefined."
        }
      }
    },
    "@typescript-eslint/no-type-alias": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of type aliases",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-type-alias.md"
        },
        "messages": {
          "noTypeAlias": "Type {{alias}} are not allowed.",
          "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAliases": {
                "enum": [
                  "always",
                  "never",
                  "in-unions",
                  "in-intersections",
                  "in-unions-and-intersections"
                ]
              },
              "allowCallbacks": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "allowConditionalTypes": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "allowConstructors": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "allowLiterals": {
                "enum": [
                  "always",
                  "never",
                  "in-unions",
                  "in-intersections",
                  "in-unions-and-intersections"
                ]
              },
              "allowMappedTypes": {
                "enum": [
                  "always",
                  "never",
                  "in-unions",
                  "in-intersections",
                  "in-unions-and-intersections"
                ]
              },
              "allowTupleTypes": {
                "enum": [
                  "always",
                  "never",
                  "in-unions",
                  "in-intersections",
                  "in-unions-and-intersections"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
      "meta": {
        "docs": {
          "description": "Flags unnecessary equality comparisons against boolean literals",
          "category": "Stylistic Issues",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.md"
        },
        "fixable": "code",
        "messages": {
          "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
          "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-unnecessary-condition": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Prevents conditionals where the type is always truthy or always falsy",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unnecessary-condition.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowConstantLoopConditions": {
                "type": "boolean"
              },
              "ignoreRhs": {
                "type": "boolean"
              },
              "checkArrayPredicates": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
          "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
          "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
          "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
          "neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
          "alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
          "literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
          "never": "Unnecessary conditional, value is `never`.",
          "neverOptionalChain": "Unnecessary optional chain on a non-nullish value."
        }
      }
    },
    "@typescript-eslint/no-unnecessary-qualifier": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Warns when a namespace qualifier is unnecessary",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.md"
        },
        "fixable": "code",
        "messages": {
          "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-unnecessary-type-arguments": {
      "meta": {
        "docs": {
          "description": "Enforces that type arguments will not be used if not required",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.md"
        },
        "fixable": "code",
        "messages": {
          "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-unnecessary-type-assertion": {
      "meta": {
        "docs": {
          "description": "Warns if a type assertion does not change the type of an expression",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.md"
        },
        "fixable": "code",
        "messages": {
          "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
          "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "typesToIgnore": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-unsafe-assignment": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows assigning any to variables and properties",
          "category": "Possible Errors",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md"
        },
        "messages": {
          "anyAssignment": "Unsafe assignment of an any value.",
          "unsafeArrayPattern": "Unsafe array destructuring of an any array value.",
          "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an any value.",
          "unsafeAssignment": "Unsafe asignment of type {{sender}} to a variable of type {{receiver}}.",
          "unsafeArraySpread": "Unsafe spread of an any value in an array."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-unsafe-call": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows calling an any type value",
          "category": "Possible Errors",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unsafe-call.md"
        },
        "messages": {
          "unsafeCall": "Unsafe call of an any typed value.",
          "unsafeNew": "Unsafe construction of an any type value.",
          "unsafeTemplateTag": "Unsafe any typed template tag."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-unsafe-member-access": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows member access on any typed variables",
          "category": "Possible Errors",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unsafe-member-access.md"
        },
        "messages": {
          "unsafeMemberExpression": "Unsafe member access {{property}} on an any value.",
          "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an any value."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-unsafe-return": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows returning any from a function",
          "category": "Possible Errors",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unsafe-return.md"
        },
        "messages": {
          "unsafeReturn": "Unsafe return of an {{type}} typed value",
          "unsafeReturnAssignment": "Unsafe return of type {{sender}} from function with return type {{receiver}}."
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-untyped-public-signature": {
      "meta": {
        "deprecated": true,
        "replacedBy": [
          "explicit-module-boundary-types"
        ],
        "docs": {
          "description": "Disallow untyped public methods",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-untyped-public-signature.md"
        },
        "messages": {
          "noReturnType": "Public method has no return type.",
          "untypedParameter": "Public method parameters should be typed."
        },
        "schema": [
          {
            "allowAdditionalProperties": false,
            "properties": {
              "ignoredMethods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "type": "object"
          }
        ],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/no-unused-expressions": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unused expressions",
          "category": "Best Practices",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unused-expressions.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowShortCircuit": {
                "type": "boolean",
                "default": false
              },
              "allowTernary": {
                "type": "boolean",
                "default": false
              },
              "allowTaggedTemplates": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {}
      }
    },
    "@typescript-eslint/no-unused-vars-experimental": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow unused variables and arguments",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unused-vars-experimental.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoredNamesRegex": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "boolean",
                    "enum": [
                      false
                    ]
                  }
                ]
              },
              "ignoreArgsIfArgsAfterAreUsed": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unused": "{{type}} '{{name}}' is declared but its value is never read.",
          "unusedWithIgnorePattern": "{{type}} '{{name}}' is declared but its value is never read. Allowed unused names must match {{pattern}}.",
          "unusedImport": "All imports in import declaration are unused.",
          "unusedTypeParameters": "All type parameters are unused."
        }
      }
    },
    "@typescript-eslint/no-unused-vars": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow unused variables",
          "category": "Variables",
          "recommended": "warn",
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-unused-vars.md"
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "all",
                  "local"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "vars": {
                    "enum": [
                      "all",
                      "local"
                    ]
                  },
                  "varsIgnorePattern": {
                    "type": "string"
                  },
                  "args": {
                    "enum": [
                      "all",
                      "after-used",
                      "none"
                    ]
                  },
                  "ignoreRestSiblings": {
                    "type": "boolean"
                  },
                  "argsIgnorePattern": {
                    "type": "string"
                  },
                  "caughtErrors": {
                    "enum": [
                      "all",
                      "none"
                    ]
                  },
                  "caughtErrorsIgnorePattern": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "@typescript-eslint/no-use-before-define": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow the use of variables before they are defined",
          "category": "Variables",
          "recommended": "error",
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-use-before-define.md"
        },
        "messages": {
          "noUseBeforeDefine": "'{{name}}' was used before it was defined."
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "nofunc"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "functions": {
                    "type": "boolean"
                  },
                  "classes": {
                    "type": "boolean"
                  },
                  "enums": {
                    "type": "boolean"
                  },
                  "variables": {
                    "type": "boolean"
                  },
                  "typedefs": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "@typescript-eslint/no-useless-constructor": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallow unnecessary constructors",
          "category": "Best Practices",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-useless-constructor.md"
        },
        "schema": []
      }
    },
    "@typescript-eslint/no-var-requires": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Disallows the use of require statements except in import statements",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/no-var-requires.md"
        },
        "messages": {
          "noVarReqs": "Require statement not part of import statement."
        },
        "schema": []
      }
    },
    "@typescript-eslint/prefer-as-const": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Prefer usage of `as const` over literal type",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-as-const.md"
        },
        "fixable": "code",
        "messages": {
          "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
          "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
          "variableSuggest": "You should use `as const` instead of type annotation."
        },
        "schema": []
      }
    },
    "@typescript-eslint/prefer-for-of": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-for-of.md"
        },
        "messages": {
          "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
        },
        "schema": []
      }
    },
    "@typescript-eslint/prefer-function-type": {
      "meta": {
        "docs": {
          "description": "Use function types instead of interfaces with call signatures",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-function-type.md"
        },
        "fixable": "code",
        "messages": {
          "functionTypeOverCallableType": "{{ type }} has only a call signature - use '{{ sigSuggestion }}' instead."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/prefer-includes": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce `includes` method over `indexOf` method",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-includes.md"
        },
        "fixable": "code",
        "messages": {
          "preferIncludes": "Use 'includes()' method instead.",
          "preferStringIncludes": "Use `String#includes()` method with a string instead."
        },
        "schema": []
      }
    },
    "@typescript-eslint/prefer-namespace-keyword": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Require the use of the `namespace` keyword instead of the `module` keyword to declare custom TypeScript modules",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.md"
        },
        "fixable": "code",
        "messages": {
          "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
        },
        "schema": []
      }
    },
    "@typescript-eslint/prefer-nullish-coalescing": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce the usage of the nullish coalescing operator instead of logical chaining",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md"
        },
        "fixable": "code",
        "messages": {
          "preferNullish": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreConditionalTests": {
                "type": "boolean"
              },
              "ignoreMixedLogicalExpressions": {
                "type": "boolean"
              },
              "forceSuggestionFixer": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/prefer-optional-chain": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Prefer using concise optional chain expressions instead of chained logical ands",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-optional-chain.md"
        },
        "fixable": "code",
        "messages": {
          "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
          "optionalChainSuggest": "Change to an optional chain."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "suggestInsteadOfAutofix": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/prefer-readonly-parameter-types": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Requires that function parameters are typed as readonly to prevent accidental mutation of inputs",
          "category": "Possible Errors",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.md"
        },
        "schema": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "checkParameterProperties": {
                "type": "boolean"
              }
            }
          }
        ],
        "messages": {
          "shouldBeReadonly": "Parameter should be a read only type."
        }
      }
    },
    "@typescript-eslint/prefer-readonly": {
      "meta": {
        "docs": {
          "description": "Requires that private members are marked as `readonly` if they're never modified outside of the constructor",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-readonly.md"
        },
        "fixable": "code",
        "messages": {
          "preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`."
        },
        "schema": [
          {
            "allowAdditionalProperties": false,
            "properties": {
              "onlyInlineLambdas": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/prefer-reduce-type-parameter": {
      "meta": {
        "type": "problem",
        "docs": {
          "category": "Best Practices",
          "recommended": false,
          "description": "Prefer using type parameter when calling `Array#reduce` instead of casting",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.md"
        },
        "messages": {
          "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value."
        },
        "fixable": "code",
        "schema": []
      }
    },
    "@typescript-eslint/prefer-regexp-exec": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-regexp-exec.md"
        },
        "messages": {
          "regExpExecOverStringMatch": "Use the `RegExp#exec()` method instead."
        },
        "schema": []
      }
    },
    "@typescript-eslint/prefer-string-starts-ends-with": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce the use of `String#startsWith` and `String#endsWith` instead of other equivalent methods of checking substrings",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.md"
        },
        "messages": {
          "preferStartsWith": "Use 'String#startsWith' method instead.",
          "preferEndsWith": "Use the 'String#endsWith' method instead."
        },
        "schema": [],
        "fixable": "code"
      }
    },
    "@typescript-eslint/prefer-ts-expect-error": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Recommends using `// @ts-expect-error` over `// @ts-ignore`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/prefer-ts-expect-error.md"
        },
        "fixable": "code",
        "messages": {
          "preferExpectErrorComment": "Use \"// @ts-expect-error\" to ensure an error is actually being suppressed."
        },
        "schema": []
      }
    },
    "@typescript-eslint/promise-function-async": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Requires any function or method that returns a Promise to be marked async",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/promise-function-async.md"
        },
        "messages": {
          "missingAsync": "Functions that return promises must be async."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAny": {
                "type": "boolean"
              },
              "allowedPromiseNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "checkArrowFunctions": {
                "type": "boolean"
              },
              "checkFunctionDeclarations": {
                "type": "boolean"
              },
              "checkFunctionExpressions": {
                "type": "boolean"
              },
              "checkMethodDeclarations": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/quotes": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Enforce the consistent use of either backticks, double, or single quotes",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/quotes.md"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "single",
              "double",
              "backtick"
            ]
          },
          {
            "anyOf": [
              {
                "enum": [
                  "avoid-escape"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "avoidEscape": {
                    "type": "boolean"
                  },
                  "allowTemplateLiterals": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "@typescript-eslint/require-array-sort-compare": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Requires `Array#sort` calls to always provide a `compareFunction`",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/require-array-sort-compare.md"
        },
        "messages": {
          "requireCompare": "Require 'compare' argument."
        },
        "schema": []
      }
    },
    "@typescript-eslint/require-await": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow async functions which have no `await` expression",
          "category": "Best Practices",
          "recommended": "error",
          "requiresTypeChecking": true,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/require-await.md"
        },
        "schema": [],
        "messages": {
          "missingAwait": "{{name}} has no 'await' expression."
        }
      }
    },
    "@typescript-eslint/restrict-plus-operands": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "When adding two variables, operands must both be of type number or of type string",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/restrict-plus-operands.md"
        },
        "messages": {
          "notNumbers": "Operands of '+' operation must either be both strings or both numbers.",
          "notStrings": "Operands of '+' operation must either be both strings or both numbers. Consider using a template literal.",
          "notBigInts": "Operands of '+' operation must be both bigints."
        },
        "schema": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "checkCompoundAssignments": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "@typescript-eslint/restrict-template-expressions": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "Enforce template literal expressions to be of string type",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/restrict-template-expressions.md"
        },
        "messages": {
          "invalidType": "Invalid type of template literal expression."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowNumber": {
                "type": "boolean"
              },
              "allowBoolean": {
                "type": "boolean"
              },
              "allowAny": {
                "type": "boolean"
              },
              "allowNullable": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "@typescript-eslint/return-await": {
      "meta": {
        "docs": {
          "description": "Enforces consistent returning of awaited values",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "extendsBaseRule": "no-return-await",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/return-await.md"
        },
        "fixable": "code",
        "type": "problem",
        "messages": {
          "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
          "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
          "requiredPromiseAwait": "Returning an awaited promise is required in this context."
        },
        "schema": [
          {
            "enum": [
              "in-try-catch",
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "@typescript-eslint/semi": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Require or disallow semicolons instead of ASI",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/semi.md"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "beforeStatementContinuationChars": {
                      "enum": [
                        "always",
                        "any",
                        "never"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "omitLastInOneLineBlock": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        }
      }
    },
    "@typescript-eslint/space-before-function-paren": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Enforces consistent spacing before function parenthesis",
          "category": "Stylistic Issues",
          "recommended": false,
          "extendsBaseRule": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/space-before-function-paren.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "anonymous": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  },
                  "named": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  },
                  "asyncArrow": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpected": "Unexpected space before function parentheses.",
          "missing": "Missing space before function parentheses."
        }
      }
    },
    "@typescript-eslint/strict-boolean-expressions": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Restricts the types allowed in boolean expressions",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/strict-boolean-expressions.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreRhs": {
                "type": "boolean"
              },
              "allowNullable": {
                "type": "boolean"
              },
              "allowSafe": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
          "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
          "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
          "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
          "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
          "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
          "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
          "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
          "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
          "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required."
        }
      }
    },
    "@typescript-eslint/switch-exhaustiveness-check": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Exhaustiveness checking in switch with union type",
          "category": "Best Practices",
          "recommended": false,
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.md"
        },
        "schema": [],
        "messages": {
          "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
          "addMissingCases": "Add branches for missing cases."
        }
      }
    },
    "@typescript-eslint/triple-slash-reference": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Sets preference level for triple slash directives versus ES6-style import declarations",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/triple-slash-reference.md"
        },
        "messages": {
          "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "lib": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "path": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "types": {
                "enum": [
                  "always",
                  "never",
                  "prefer-import"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/type-annotation-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Require consistent spacing around type annotations",
          "category": "Stylistic Issues",
          "recommended": "error",
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/type-annotation-spacing.md"
        },
        "fixable": "whitespace",
        "messages": {
          "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
          "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
          "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
          "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean"
              },
              "after": {
                "type": "boolean"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "colon": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "arrow": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "variable": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "parameter": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "property": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "returnType": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "@typescript-eslint/typedef": {
      "meta": {
        "docs": {
          "description": "Requires type annotations to exist",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/typedef.md"
        },
        "messages": {
          "expectedTypedef": "Expected a type annotation.",
          "expectedTypedefNamed": "Expected {{name}} to have a type annotation."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "arrayDestructuring": {
                "type": "boolean"
              },
              "arrowParameter": {
                "type": "boolean"
              },
              "memberVariableDeclaration": {
                "type": "boolean"
              },
              "objectDestructuring": {
                "type": "boolean"
              },
              "parameter": {
                "type": "boolean"
              },
              "propertyDeclaration": {
                "type": "boolean"
              },
              "variableDeclaration": {
                "type": "boolean"
              },
              "variableDeclarationIgnoreFunction": {
                "type": "boolean"
              }
            }
          }
        ],
        "type": "suggestion"
      }
    },
    "@typescript-eslint/unbound-method": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Enforces unbound methods are called with their expected scope",
          "recommended": "error",
          "requiresTypeChecking": true,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/unbound-method.md"
        },
        "messages": {
          "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreStatic": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "problem"
      }
    },
    "@typescript-eslint/unified-signatures": {
      "meta": {
        "docs": {
          "description": "Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter",
          "category": "Variables",
          "recommended": false,
          "url": "https://github.com/typescript-eslint/typescript-eslint/blob/v2.31.0/packages/eslint-plugin/docs/rules/unified-signatures.md"
        },
        "type": "suggestion",
        "messages": {
          "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
          "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
          "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
        },
        "schema": []
      }
    }
  },
  "eslint": {
    "accessor-pairs": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce getter and setter pairs in objects and classes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/accessor-pairs"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "getWithoutSet": {
                "type": "boolean",
                "default": false
              },
              "setWithoutGet": {
                "type": "boolean",
                "default": true
              },
              "enforceForClassMembers": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingGetterInPropertyDescriptor": "Getter is not present in property descriptor.",
          "missingSetterInPropertyDescriptor": "Setter is not present in property descriptor.",
          "missingGetterInObjectLiteral": "Getter is not present for {{ name }}.",
          "missingSetterInObjectLiteral": "Setter is not present for {{ name }}.",
          "missingGetterInClass": "Getter is not present for class {{ name }}.",
          "missingSetterInClass": "Setter is not present for class {{ name }}."
        }
      }
    },
    "array-bracket-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce linebreaks after opening and before closing array brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-bracket-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "consistent"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "multiline": {
                    "type": "boolean"
                  },
                  "minItems": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
          "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
          "missingOpeningLinebreak": "A linebreak is required after '['.",
          "missingClosingLinebreak": "A linebreak is required before ']'."
        }
      }
    },
    "array-bracket-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside array brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-bracket-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "singleValue": {
                "type": "boolean"
              },
              "objectsInArrays": {
                "type": "boolean"
              },
              "arraysInArrays": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
          "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
          "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
          "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
        }
      }
    },
    "array-callback-return": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "enforce `return` statements in callbacks of array methods",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-callback-return"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowImplicit": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedAtEnd": "Expected to return a value at the end of {{name}}.",
          "expectedInside": "Expected to return a value in {{name}}.",
          "expectedReturnValue": "{{name}} expected a return value."
        }
      }
    },
    "array-element-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce line breaks after each array element",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-element-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "consistent"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "multiline": {
                    "type": "boolean"
                  },
                  "minItems": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedLineBreak": "There should be no linebreak here.",
          "missingLineBreak": "There should be a linebreak after this element."
        }
      }
    },
    "arrow-body-style": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require braces around arrow function bodies",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/arrow-body-style"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "as-needed"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "requireReturnForObjectLiteral": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "unexpectedOtherBlock": "Unexpected block statement surrounding arrow body.",
          "unexpectedEmptyBlock": "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
          "unexpectedObjectBlock": "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
          "unexpectedSingleBlock": "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
          "expectedBlock": "Expected block statement surrounding arrow body."
        }
      }
    },
    "arrow-parens": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require parentheses around arrow function arguments",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/arrow-parens"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "always",
              "as-needed"
            ]
          },
          {
            "type": "object",
            "properties": {
              "requireForBlockBody": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedParens": "Unexpected parentheses around single function argument.",
          "expectedParens": "Expected parentheses around arrow function argument.",
          "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
          "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
        }
      }
    },
    "arrow-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after the arrow in arrow functions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/arrow-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": true
              },
              "after": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedBefore": "Missing space before =>.",
          "unexpectedBefore": "Unexpected space before =>.",
          "expectedAfter": "Missing space after =>.",
          "unexpectedAfter": "Unexpected space after =>."
        }
      }
    },
    "block-scoped-var": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the use of variables within the scope they are defined",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/block-scoped-var"
        },
        "schema": [],
        "messages": {
          "outOfScope": "'{{name}}' used outside of binding context."
        }
      }
    },
    "block-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow or enforce spaces inside of blocks after opening block and before closing block",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/block-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ],
        "messages": {
          "missing": "Requires a space {{location}} '{{token}}'.",
          "extra": "Unexpected space(s) {{location}} '{{token}}'."
        }
      }
    },
    "brace-style": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent brace style for blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/brace-style"
        },
        "schema": [
          {
            "enum": [
              "1tbs",
              "stroustrup",
              "allman"
            ]
          },
          {
            "type": "object",
            "properties": {
              "allowSingleLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
          "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
          "blockSameLine": "Statement inside of curly braces should be on next line.",
          "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
          "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
          "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
        }
      }
    },
    "callback-return": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `return` statements after callbacks",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/callback-return"
        },
        "schema": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "messages": {
          "missingReturn": "Expected return with your callback function."
        }
      }
    },
    "camelcase": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce camelcase naming convention",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/camelcase"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              },
              "ignoreImports": {
                "type": "boolean",
                "default": false
              },
              "properties": {
                "enum": [
                  "always",
                  "never"
                ]
              },
              "allow": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ],
                "minItems": 0,
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "notCamelCase": "Identifier '{{name}}' is not in camel case."
        }
      }
    },
    "capitalized-comments": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce or disallow capitalization of the first letter of a comment",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/capitalized-comments"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "ignorePattern": {
                    "type": "string"
                  },
                  "ignoreInlineComments": {
                    "type": "boolean"
                  },
                  "ignoreConsecutiveComments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "line": {
                    "type": "object",
                    "properties": {
                      "ignorePattern": {
                        "type": "string"
                      },
                      "ignoreInlineComments": {
                        "type": "boolean"
                      },
                      "ignoreConsecutiveComments": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "block": {
                    "type": "object",
                    "properties": {
                      "ignorePattern": {
                        "type": "string"
                      },
                      "ignoreInlineComments": {
                        "type": "boolean"
                      },
                      "ignoreConsecutiveComments": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedLowercaseComment": "Comments should not begin with a lowercase character.",
          "unexpectedUppercaseComment": "Comments should not begin with an uppercase character."
        }
      }
    },
    "class-methods-use-this": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce that class methods utilize `this`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/class-methods-use-this"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptMethods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingThis": "Expected 'this' to be used by class {{name}}."
        }
      }
    },
    "comma-dangle": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow trailing commas",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/comma-dangle"
        },
        "fixable": "code",
        "schema": {
          "definitions": {
            "value": {
              "enum": [
                "always-multiline",
                "always",
                "never",
                "only-multiline"
              ]
            },
            "valueWithIgnore": {
              "enum": [
                "always-multiline",
                "always",
                "ignore",
                "never",
                "only-multiline"
              ]
            }
          },
          "type": "array",
          "items": [
            {
              "oneOf": [
                {
                  "$ref": "#/definitions/value"
                },
                {
                  "type": "object",
                  "properties": {
                    "arrays": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "objects": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "imports": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "exports": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "functions": {
                      "$ref": "#/definitions/valueWithIgnore"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "messages": {
          "unexpected": "Unexpected trailing comma.",
          "missing": "Missing trailing comma."
        }
      }
    },
    "comma-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after commas",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/comma-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": false
              },
              "after": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missing": "A space is required {{loc}} ','.",
          "unexpected": "There should be no space {{loc}} ','."
        }
      }
    },
    "comma-style": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent comma style",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/comma-style"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "first",
              "last"
            ]
          },
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
          "expectedCommaFirst": "',' should be placed first.",
          "expectedCommaLast": "',' should be placed last."
        }
      }
    },
    "complexity": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum cyclomatic complexity allowed in a program",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/complexity"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "complex": "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}."
        }
      }
    },
    "computed-property-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside computed property brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/computed-property-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "enforceForClassMembers": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
          "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
          "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
          "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
        }
      }
    },
    "consistent-return": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `return` statements to either always or never specify values",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/consistent-return"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "treatUndefinedAsUnspecified": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingReturn": "Expected to return a value at the end of {{name}}.",
          "missingReturnValue": "{{name}} expected a return value.",
          "unexpectedReturnValue": "{{name}} expected no return value."
        }
      }
    },
    "consistent-this": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce consistent naming when capturing the current execution context",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/consistent-this"
        },
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "messages": {
          "aliasNotAssignedToThis": "Designated alias '{{name}}' is not assigned to 'this'.",
          "unexpectedAlias": "Unexpected alias '{{name}}' for 'this'."
        }
      }
    },
    "constructor-super": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "require `super()` calls in constructors",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/constructor-super"
        },
        "schema": [],
        "messages": {
          "missingSome": "Lacked a call of 'super()' in some code paths.",
          "missingAll": "Expected to call 'super()'.",
          "duplicate": "Unexpected duplicate 'super()'.",
          "badSuper": "Unexpected 'super()' because 'super' is not a constructor.",
          "unexpected": "Unexpected 'super()'."
        }
      }
    },
    "curly": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce consistent brace style for all control statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/curly"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "all"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "multi",
                    "multi-line",
                    "multi-or-nest"
                  ]
                },
                {
                  "enum": [
                    "consistent"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "missingCurlyAfter": "Expected { after '{{name}}'.",
          "missingCurlyAfterCondition": "Expected { after '{{name}}' condition.",
          "unexpectedCurlyAfter": "Unnecessary { after '{{name}}'.",
          "unexpectedCurlyAfterCondition": "Unnecessary { after '{{name}}' condition."
        }
      }
    },
    "default-case": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `default` cases in `switch` statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/default-case"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "commentPattern": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingDefaultCase": "Expected a default case."
        }
      }
    },
    "default-param-last": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce default parameters to be last",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/default-param-last"
        },
        "schema": [],
        "messages": {
          "shouldBeLast": "Default parameters should be last."
        }
      }
    },
    "dot-location": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent newlines before and after dots",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/dot-location"
        },
        "schema": [
          {
            "enum": [
              "object",
              "property"
            ]
          }
        ],
        "fixable": "code",
        "messages": {
          "expectedDotAfterObject": "Expected dot to be on same line as object.",
          "expectedDotBeforeProperty": "Expected dot to be on same line as property."
        }
      }
    },
    "dot-notation": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce dot notation whenever possible",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/dot-notation"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowKeywords": {
                "type": "boolean",
                "default": true
              },
              "allowPattern": {
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "useDot": "[{{key}}] is better written in dot notation.",
          "useBrackets": ".{{key}} is a syntax error."
        }
      }
    },
    "eol-last": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow newline at the end of files",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/eol-last"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never",
              "unix",
              "windows"
            ]
          }
        ],
        "messages": {
          "missing": "Newline required at end of file but not found.",
          "unexpected": "Newline not allowed at end of file."
        }
      }
    },
    "eqeqeq": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require the use of `===` and `!==`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/eqeqeq"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "null": {
                      "enum": [
                        "always",
                        "never",
                        "ignore"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "additionalItems": false
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "smart",
                    "allow-null"
                  ]
                }
              ],
              "additionalItems": false
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "unexpected": "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'."
        }
      }
    },
    "for-direction": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "enforce \"for\" loop update clause moving the counter in the right direction.",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/for-direction"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "incorrectDirection": "The update clause in this loop moves the variable in the wrong direction."
        }
      }
    },
    "func-call-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing between function identifiers and their invocations",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-call-spacing"
        },
        "fixable": "whitespace",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "allowNewlines": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "unexpected": "Unexpected newline between function name and paren.",
          "missing": "Missing space between function name and paren."
        }
      }
    },
    "func-name-matching": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require function names to match the name of the variable or property to which they are assigned",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-name-matching"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "additionalItems": false,
              "items": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "considerPropertyDescriptor": {
                      "type": "boolean"
                    },
                    "includeCommonJSModuleExports": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "type": "array",
              "additionalItems": false,
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "considerPropertyDescriptor": {
                      "type": "boolean"
                    },
                    "includeCommonJSModuleExports": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "messages": {
          "matchProperty": "Function name `{{funcName}}` should match property name `{{name}}`.",
          "matchVariable": "Function name `{{funcName}}` should match variable name `{{name}}`.",
          "notMatchProperty": "Function name `{{funcName}}` should not match property name `{{name}}`.",
          "notMatchVariable": "Function name `{{funcName}}` should not match variable name `{{name}}`."
        }
      }
    },
    "func-names": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow named `function` expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-names"
        },
        "schema": {
          "definitions": {
            "value": {
              "enum": [
                "always",
                "as-needed",
                "never"
              ]
            }
          },
          "items": [
            {
              "$ref": "#/definitions/value"
            },
            {
              "type": "object",
              "properties": {
                "generators": {
                  "$ref": "#/definitions/value"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "messages": {
          "unnamed": "Unexpected unnamed {{name}}.",
          "named": "Unexpected named {{name}}."
        }
      }
    },
    "func-style": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the consistent use of either `function` declarations or expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-style"
        },
        "schema": [
          {
            "enum": [
              "declaration",
              "expression"
            ]
          },
          {
            "type": "object",
            "properties": {
              "allowArrowFunctions": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expression": "Expected a function expression.",
          "declaration": "Expected a function declaration."
        }
      }
    },
    "function-call-argument-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce line breaks between arguments of a function call",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/function-call-argument-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never",
              "consistent"
            ]
          }
        ],
        "messages": {
          "unexpectedLineBreak": "There should be no line break here.",
          "missingLineBreak": "There should be a line break after this argument."
        }
      }
    },
    "function-paren-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent line breaks inside function parentheses",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/function-paren-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "consistent",
                  "multiline",
                  "multiline-arguments"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "minItems": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "expectedBefore": "Expected newline before ')'.",
          "expectedAfter": "Expected newline after '('.",
          "expectedBetween": "Expected newline between arguments/params.",
          "unexpectedBefore": "Unexpected newline before ')'.",
          "unexpectedAfter": "Unexpected newline after '('."
        }
      }
    },
    "generator-star-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing around `*` operators in generator functions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/generator-star-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "before",
                  "after",
                  "both",
                  "neither"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "before": {
                    "type": "boolean"
                  },
                  "after": {
                    "type": "boolean"
                  },
                  "named": {
                    "oneOf": [
                      {
                        "enum": [
                          "before",
                          "after",
                          "both",
                          "neither"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "before": {
                            "type": "boolean"
                          },
                          "after": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "anonymous": {
                    "oneOf": [
                      {
                        "enum": [
                          "before",
                          "after",
                          "both",
                          "neither"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "before": {
                            "type": "boolean"
                          },
                          "after": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "method": {
                    "oneOf": [
                      {
                        "enum": [
                          "before",
                          "after",
                          "both",
                          "neither"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "before": {
                            "type": "boolean"
                          },
                          "after": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "missingBefore": "Missing space before *.",
          "missingAfter": "Missing space after *.",
          "unexpectedBefore": "Unexpected space before *.",
          "unexpectedAfter": "Unexpected space after *."
        }
      }
    },
    "getter-return": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "enforce `return` statements in getters",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/getter-return"
        },
        "fixable": null,
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowImplicit": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expected": "Expected to return a value in {{name}}.",
          "expectedAlways": "Expected {{name}} to always return a value."
        }
      }
    },
    "global-require": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `require()` calls to be placed at top-level module scope",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/global-require"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected require()."
        }
      }
    },
    "grouped-accessor-pairs": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require grouped accessor pairs in object literals and classes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/grouped-accessor-pairs"
        },
        "schema": [
          {
            "enum": [
              "anyOrder",
              "getBeforeSet",
              "setBeforeGet"
            ]
          }
        ],
        "messages": {
          "notGrouped": "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
          "invalidOrder": "Expected {{ latterName }} to be before {{ formerName }}."
        }
      }
    },
    "guard-for-in": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `for-in` loops to include an `if` statement",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/guard-for-in"
        },
        "schema": [],
        "messages": {
          "wrap": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
        }
      }
    },
    "handle-callback-err": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require error handling in callbacks",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/handle-callback-err"
        },
        "schema": [
          {
            "type": "string"
          }
        ],
        "messages": {
          "expected": "Expected error to be handled."
        }
      }
    },
    "id-blacklist": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified identifiers",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-blacklist"
        },
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "messages": {
          "blacklisted": "Identifier '{{name}}' is blacklisted."
        }
      }
    },
    "id-length": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce minimum and maximum identifier lengths",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-length"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "min": {
                "type": "integer",
                "default": 2
              },
              "max": {
                "type": "integer"
              },
              "exceptions": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "type": "string"
                }
              },
              "properties": {
                "enum": [
                  "always",
                  "never"
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "tooShort": "Identifier name '{{name}}' is too short (< {{min}}).",
          "tooLong": "Identifier name '{{name}}' is too long (> {{max}})."
        }
      }
    },
    "id-match": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require identifiers to match a specified regular expression",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-match"
        },
        "schema": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "properties": {
                "type": "boolean",
                "default": false
              },
              "onlyDeclarations": {
                "type": "boolean",
                "default": false
              },
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              }
            }
          }
        ],
        "messages": {
          "notMatch": "Identifier '{{name}}' does not match the pattern '{{pattern}}'."
        }
      }
    },
    "implicit-arrow-linebreak": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce the location of arrow function bodies",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/implicit-arrow-linebreak"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "beside",
              "below"
            ]
          }
        ],
        "messages": {
          "expected": "Expected a linebreak before this expression.",
          "unexpected": "Expected no linebreak before this expression."
        }
      }
    },
    "indent": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent indentation",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/indent"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "tab"
                ]
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "SwitchCase": {
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "VariableDeclarator": {
                "oneOf": [
                  {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "var": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "enum": [
                              "first",
                              "off"
                            ]
                          }
                        ]
                      },
                      "let": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "enum": [
                              "first",
                              "off"
                            ]
                          }
                        ]
                      },
                      "const": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "enum": [
                              "first",
                              "off"
                            ]
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "outerIIFEBody": {
                "type": "integer",
                "minimum": 0
              },
              "MemberExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "off"
                    ]
                  }
                ]
              },
              "FunctionDeclaration": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              "FunctionExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              },
              "CallExpression": {
                "type": "object",
                "properties": {
                  "arguments": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first",
                          "off"
                        ]
                      }
                    ]
                  }
                },
                "additionalProperties": false
              },
              "ArrayExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first",
                      "off"
                    ]
                  }
                ]
              },
              "ObjectExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first",
                      "off"
                    ]
                  }
                ]
              },
              "ImportDeclaration": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first",
                      "off"
                    ]
                  }
                ]
              },
              "flatTernaryExpressions": {
                "type": "boolean",
                "default": false
              },
              "ignoredNodes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "not": {
                    "pattern": ":exit$"
                  }
                }
              },
              "ignoreComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
        }
      }
    },
    "indent-legacy": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent indentation",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/indent-legacy"
        },
        "deprecated": true,
        "replacedBy": [
          "indent"
        ],
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "tab"
                ]
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "SwitchCase": {
                "type": "integer",
                "minimum": 0
              },
              "VariableDeclarator": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "type": "object",
                    "properties": {
                      "var": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "let": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "const": {
                        "type": "integer",
                        "minimum": 0
                      }
                    }
                  }
                ]
              },
              "outerIIFEBody": {
                "type": "integer",
                "minimum": 0
              },
              "MemberExpression": {
                "type": "integer",
                "minimum": 0
              },
              "FunctionDeclaration": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              },
              "FunctionExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              },
              "CallExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 0
                      },
                      {
                        "enum": [
                          "first"
                        ]
                      }
                    ]
                  }
                }
              },
              "ArrayExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first"
                    ]
                  }
                ]
              },
              "ObjectExpression": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 0
                  },
                  {
                    "enum": [
                      "first"
                    ]
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expected": "Expected indentation of {{expected}} but found {{actual}}."
        }
      }
    },
    "init-declarations": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow initialization in variable declarations",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/init-declarations"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "ignoreForLoopInit": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "initialized": "Variable '{{idName}}' should be initialized on declaration.",
          "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
        }
      }
    },
    "jsx-quotes": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce the consistent use of either double or single quotes in JSX attributes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/jsx-quotes"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "prefer-single",
              "prefer-double"
            ]
          }
        ],
        "messages": {
          "unexpected": "Unexpected usage of {{description}}."
        }
      }
    },
    "key-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing between keys and values in object literal properties",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/key-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "align": {
                    "anyOf": [
                      {
                        "enum": [
                          "colon",
                          "value"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "mode": {
                            "enum": [
                              "strict",
                              "minimum"
                            ]
                          },
                          "on": {
                            "enum": [
                              "colon",
                              "value"
                            ]
                          },
                          "beforeColon": {
                            "type": "boolean"
                          },
                          "afterColon": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "mode": {
                    "enum": [
                      "strict",
                      "minimum"
                    ]
                  },
                  "beforeColon": {
                    "type": "boolean"
                  },
                  "afterColon": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "singleLine": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": [
                          "strict",
                          "minimum"
                        ]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "multiLine": {
                    "type": "object",
                    "properties": {
                      "align": {
                        "anyOf": [
                          {
                            "enum": [
                              "colon",
                              "value"
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "enum": [
                                  "strict",
                                  "minimum"
                                ]
                              },
                              "on": {
                                "enum": [
                                  "colon",
                                  "value"
                                ]
                              },
                              "beforeColon": {
                                "type": "boolean"
                              },
                              "afterColon": {
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        ]
                      },
                      "mode": {
                        "enum": [
                          "strict",
                          "minimum"
                        ]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "singleLine": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": [
                          "strict",
                          "minimum"
                        ]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "multiLine": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": [
                          "strict",
                          "minimum"
                        ]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "align": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": [
                          "strict",
                          "minimum"
                        ]
                      },
                      "on": {
                        "enum": [
                          "colon",
                          "value"
                        ]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "extraKey": "Extra space after {{computed}}key '{{key}}'.",
          "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
          "missingKey": "Missing space after {{computed}}key '{{key}}'.",
          "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
        }
      }
    },
    "keyword-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after keywords",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/keyword-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": true
              },
              "after": {
                "type": "boolean",
                "default": true
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "abstract": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "as": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "async": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "await": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "boolean": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "break": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "byte": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "case": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "catch": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "char": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "class": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "const": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "continue": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "debugger": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "default": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "delete": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "do": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "double": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "else": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "enum": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "export": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "extends": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "false": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "final": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "finally": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "float": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "for": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "from": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "function": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "get": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "goto": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "if": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "implements": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "import": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "in": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "instanceof": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "int": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "interface": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "let": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "long": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "native": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "new": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "null": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "of": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "package": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "private": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "protected": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "public": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "return": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "set": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "short": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "static": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "super": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "switch": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "synchronized": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "this": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "throw": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "throws": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "transient": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "true": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "try": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "typeof": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "var": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "void": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "volatile": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "while": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "with": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "yield": {
                    "type": "object",
                    "properties": {
                      "before": {
                        "type": "boolean"
                      },
                      "after": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedBefore": "Expected space(s) before \"{{value}}\".",
          "expectedAfter": "Expected space(s) after \"{{value}}\".",
          "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
          "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
        }
      }
    },
    "line-comment-position": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce position of line comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/line-comment-position"
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "above",
                  "beside"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "position": {
                    "enum": [
                      "above",
                      "beside"
                    ]
                  },
                  "ignorePattern": {
                    "type": "string"
                  },
                  "applyDefaultPatterns": {
                    "type": "boolean"
                  },
                  "applyDefaultIgnorePatterns": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "above": "Expected comment to be above code.",
          "beside": "Expected comment to be beside code."
        }
      }
    },
    "linebreak-style": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent linebreak style",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/linebreak-style"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "unix",
              "windows"
            ]
          }
        ],
        "messages": {
          "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
          "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
        }
      }
    },
    "lines-around-comment": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require empty lines around comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/lines-around-comment"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "beforeBlockComment": {
                "type": "boolean",
                "default": true
              },
              "afterBlockComment": {
                "type": "boolean",
                "default": false
              },
              "beforeLineComment": {
                "type": "boolean",
                "default": false
              },
              "afterLineComment": {
                "type": "boolean",
                "default": false
              },
              "allowBlockStart": {
                "type": "boolean",
                "default": false
              },
              "allowBlockEnd": {
                "type": "boolean",
                "default": false
              },
              "allowClassStart": {
                "type": "boolean"
              },
              "allowClassEnd": {
                "type": "boolean"
              },
              "allowObjectStart": {
                "type": "boolean"
              },
              "allowObjectEnd": {
                "type": "boolean"
              },
              "allowArrayStart": {
                "type": "boolean"
              },
              "allowArrayEnd": {
                "type": "boolean"
              },
              "ignorePattern": {
                "type": "string"
              },
              "applyDefaultIgnorePatterns": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "after": "Expected line after comment.",
          "before": "Expected line before comment."
        }
      }
    },
    "lines-around-directive": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow newlines around directives",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/lines-around-directive"
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "before": {
                    "enum": [
                      "always",
                      "never"
                    ]
                  },
                  "after": {
                    "enum": [
                      "always",
                      "never"
                    ]
                  }
                },
                "additionalProperties": false,
                "minProperties": 2
              }
            ]
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "expected": "Expected newline {{location}} \"{{value}}\" directive.",
          "unexpected": "Unexpected newline {{location}} \"{{value}}\" directive."
        },
        "deprecated": true,
        "replacedBy": [
          "padding-line-between-statements"
        ]
      }
    },
    "lines-between-class-members": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow an empty line between class members",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/lines-between-class-members"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "exceptAfterSingleLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "never": "Unexpected blank line between class members.",
          "always": "Expected blank line between class members."
        }
      }
    },
    "max-classes-per-file": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of classes per file",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-classes-per-file"
        },
        "schema": [
          {
            "type": "integer",
            "minimum": 1
          }
        ],
        "messages": {
          "maximumExceeded": "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}."
        }
      }
    },
    "max-depth": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum depth that blocks can be nested",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-depth"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "tooDeeply": "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}."
        }
      }
    },
    "max-len": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce a maximum line length",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-len"
        },
        "schema": [
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "comments": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "tabWidth": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "ignorePattern": {
                    "type": "string"
                  },
                  "ignoreComments": {
                    "type": "boolean"
                  },
                  "ignoreStrings": {
                    "type": "boolean"
                  },
                  "ignoreUrls": {
                    "type": "boolean"
                  },
                  "ignoreTemplateLiterals": {
                    "type": "boolean"
                  },
                  "ignoreRegExpLiterals": {
                    "type": "boolean"
                  },
                  "ignoreTrailingComments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "comments": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "tabWidth": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "ignorePattern": {
                    "type": "string"
                  },
                  "ignoreComments": {
                    "type": "boolean"
                  },
                  "ignoreStrings": {
                    "type": "boolean"
                  },
                  "ignoreUrls": {
                    "type": "boolean"
                  },
                  "ignoreTemplateLiterals": {
                    "type": "boolean"
                  },
                  "ignoreRegExpLiterals": {
                    "type": "boolean"
                  },
                  "ignoreTrailingComments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "minimum": 0
              },
              "comments": {
                "type": "integer",
                "minimum": 0
              },
              "tabWidth": {
                "type": "integer",
                "minimum": 0
              },
              "ignorePattern": {
                "type": "string"
              },
              "ignoreComments": {
                "type": "boolean"
              },
              "ignoreStrings": {
                "type": "boolean"
              },
              "ignoreUrls": {
                "type": "boolean"
              },
              "ignoreTemplateLiterals": {
                "type": "boolean"
              },
              "ignoreRegExpLiterals": {
                "type": "boolean"
              },
              "ignoreTrailingComments": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
          "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
        }
      }
    },
    "max-lines": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of lines per file",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-lines"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "object",
                "properties": {
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "skipComments": {
                    "type": "boolean"
                  },
                  "skipBlankLines": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "exceed": "File has too many lines ({{actual}}). Maximum allowed is {{max}}."
        }
      }
    },
    "max-lines-per-function": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of line of code in a function",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-lines-per-function"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "skipComments": {
                    "type": "boolean"
                  },
                  "skipBlankLines": {
                    "type": "boolean"
                  },
                  "IIFEs": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          }
        ],
        "messages": {
          "exceed": "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}."
        }
      }
    },
    "max-nested-callbacks": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum depth that callbacks can be nested",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-nested-callbacks"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "exceed": "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}."
        }
      }
    },
    "max-params": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of parameters in function definitions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-params"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
        }
      }
    },
    "max-statements": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of statements allowed in function blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-statements"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "ignoreTopLevelFunctions": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "exceed": "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}."
        }
      }
    },
    "max-statements-per-line": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce a maximum number of statements allowed per line",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-statements-per-line"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "max": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
        }
      }
    },
    "multiline-comment-style": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a particular style for multiline comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/multiline-comment-style"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "starred-block",
              "separate-lines",
              "bare-block"
            ]
          }
        ],
        "messages": {
          "expectedBlock": "Expected a block comment instead of consecutive line comments.",
          "expectedBareBlock": "Expected a block comment without padding stars.",
          "startNewline": "Expected a linebreak after '/*'.",
          "endNewline": "Expected a linebreak before '*/'.",
          "missingStar": "Expected a '*' at the start of this line.",
          "alignment": "Expected this line to be aligned with the start of the comment.",
          "expectedLines": "Expected multiple line comments instead of a block comment."
        }
      }
    },
    "multiline-ternary": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce newlines between operands of ternary expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/multiline-ternary"
        },
        "schema": [
          {
            "enum": [
              "always",
              "always-multiline",
              "never"
            ]
          }
        ],
        "messages": {
          "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
          "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
          "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
          "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
        }
      }
    },
    "new-cap": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require constructor names to begin with a capital letter",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/new-cap"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "newIsCap": {
                "type": "boolean",
                "default": true
              },
              "capIsNew": {
                "type": "boolean",
                "default": true
              },
              "newIsCapExceptions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "newIsCapExceptionPattern": {
                "type": "string"
              },
              "capIsNewExceptions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "capIsNewExceptionPattern": {
                "type": "string"
              },
              "properties": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "upper": "A function with a name starting with an uppercase letter should only be used as a constructor.",
          "lower": "A constructor name should not start with a lowercase letter."
        }
      }
    },
    "new-parens": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce or disallow parentheses when invoking a constructor with no arguments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/new-parens"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            }
          ]
        },
        "messages": {
          "missing": "Missing '()' invoking a constructor.",
          "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
        }
      }
    },
    "newline-after-var": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow an empty line after variable declarations",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/newline-after-var"
        },
        "schema": [
          {
            "enum": [
              "never",
              "always"
            ]
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "expected": "Expected blank line after variable declarations.",
          "unexpected": "Unexpected blank line after variable declarations."
        },
        "deprecated": true,
        "replacedBy": [
          "padding-line-between-statements"
        ]
      }
    },
    "newline-before-return": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require an empty line before `return` statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/newline-before-return"
        },
        "fixable": "whitespace",
        "schema": [],
        "messages": {
          "expected": "Expected newline before return statement."
        },
        "deprecated": true,
        "replacedBy": [
          "padding-line-between-statements"
        ]
      }
    },
    "newline-per-chained-call": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require a newline after each call in a method chain",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/newline-per-chained-call"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreChainWithDepth": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "default": 2
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expected": "Expected line break before `{{callee}}`."
        }
      }
    },
    "no-alert": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `alert`, `confirm`, and `prompt`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-alert"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected {{name}}."
        }
      }
    },
    "no-array-constructor": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `Array` constructors",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-array-constructor"
        },
        "schema": [],
        "messages": {
          "preferLiteral": "The array literal notation [] is preferable."
        }
      }
    },
    "no-async-promise-executor": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow using an async function as a Promise executor",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-async-promise-executor"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "async": "Promise executor functions should not be async."
        }
      }
    },
    "no-await-in-loop": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow `await` inside of loops",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-await-in-loop"
        },
        "schema": [],
        "messages": {
          "unexpectedAwait": "Unexpected `await` inside a loop."
        }
      }
    },
    "no-bitwise": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow bitwise operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-bitwise"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "enum": [
                    "^",
                    "|",
                    "&",
                    "<<",
                    ">>",
                    ">>>",
                    "^=",
                    "|=",
                    "&=",
                    "<<=",
                    ">>=",
                    ">>>=",
                    "~"
                  ]
                },
                "uniqueItems": true
              },
              "int32Hint": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Unexpected use of '{{operator}}'."
        }
      }
    },
    "no-buffer-constructor": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow use of the `Buffer()` constructor",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-buffer-constructor"
        },
        "schema": [],
        "messages": {
          "deprecated": "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead."
        }
      }
    },
    "no-caller": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `arguments.caller` or `arguments.callee`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-caller"
        },
        "schema": [],
        "messages": {
          "unexpected": "Avoid arguments.{{prop}}."
        }
      }
    },
    "no-case-declarations": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow lexical declarations in case clauses",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-case-declarations"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected lexical declaration in case block."
        }
      }
    },
    "no-catch-shadow": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `catch` clause parameters from shadowing variables in the outer scope",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-catch-shadow"
        },
        "replacedBy": [
          "no-shadow"
        ],
        "deprecated": true,
        "schema": [],
        "messages": {
          "mutable": "Value of '{{name}}' may be overwritten in IE 8 and earlier."
        }
      }
    },
    "no-class-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning class members",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-class-assign"
        },
        "schema": [],
        "messages": {
          "class": "'{{name}}' is a class."
        }
      }
    },
    "no-compare-neg-zero": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow comparing against -0",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-compare-neg-zero"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "unexpected": "Do not use the '{{operator}}' operator to compare against -0."
        }
      }
    },
    "no-cond-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow assignment operators in conditional expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-cond-assign"
        },
        "schema": [
          {
            "enum": [
              "except-parens",
              "always"
            ]
          }
        ],
        "messages": {
          "unexpected": "Unexpected assignment within {{type}}.",
          "missing": "Expected a conditional expression and instead saw an assignment."
        }
      }
    },
    "no-confusing-arrow": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow arrow functions where they could be confused with comparisons",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-confusing-arrow"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowParens": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "confusing": "Arrow function used ambiguously with a conditional expression."
        }
      }
    },
    "no-console": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `console`",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-console"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Unexpected console statement."
        }
      }
    },
    "no-const-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning `const` variables",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-const-assign"
        },
        "schema": [],
        "messages": {
          "const": "'{{name}}' is constant."
        }
      }
    },
    "no-constant-condition": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow constant expressions in conditions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-constant-condition"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "checkLoops": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Unexpected constant condition."
        }
      }
    },
    "no-constructor-return": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow returning value from constructor",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-constructor-return"
        },
        "schema": {},
        "fixable": null,
        "messages": {
          "unexpected": "Unexpected return statement in constructor."
        }
      }
    },
    "no-continue": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `continue` statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-continue"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected use of continue statement."
        }
      }
    },
    "no-control-regex": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow control characters in regular expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-control-regex"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected control character(s) in regular expression: {{controlChars}}."
        }
      }
    },
    "no-debugger": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow the use of `debugger`",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-debugger"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "unexpected": "Unexpected 'debugger' statement."
        }
      }
    },
    "no-delete-var": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow deleting variables",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-delete-var"
        },
        "schema": [],
        "messages": {
          "unexpected": "Variables should not be deleted."
        }
      }
    },
    "no-div-regex": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow division operators explicitly at the beginning of regular expressions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-div-regex"
        },
        "fixable": "code",
        "schema": [],
        "messages": {
          "unexpected": "A regular expression literal can be confused with '/='."
        }
      }
    },
    "no-dupe-args": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate arguments in `function` definitions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-args"
        },
        "schema": [],
        "messages": {
          "unexpected": "Duplicate param '{{name}}'."
        }
      }
    },
    "no-dupe-class-members": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate class members",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-class-members"
        },
        "schema": [],
        "messages": {
          "unexpected": "Duplicate name '{{name}}'."
        }
      }
    },
    "no-dupe-else-if": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate conditions in if-else-if chains",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-dupe-else-if"
        },
        "schema": [],
        "messages": {
          "unexpected": "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain."
        }
      }
    },
    "no-dupe-keys": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate keys in object literals",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-keys"
        },
        "schema": [],
        "messages": {
          "unexpected": "Duplicate key '{{name}}'."
        }
      }
    },
    "no-duplicate-case": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate case labels",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-duplicate-case"
        },
        "schema": [],
        "messages": {
          "unexpected": "Duplicate case label."
        }
      }
    },
    "no-duplicate-imports": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate module imports",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-duplicate-imports"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "includeExports": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "import": "'{{module}}' import is duplicated.",
          "importAs": "'{{module}}' import is duplicated as export.",
          "export": "'{{module}}' export is duplicated.",
          "exportAs": "'{{module}}' export is duplicated as import."
        }
      }
    },
    "no-else-return": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `else` blocks after `return` statements in `if` statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-else-return"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowElseIf": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unexpected": "Unnecessary 'else' after 'return'."
        }
      }
    },
    "no-empty": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow empty block statements",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-empty"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowEmptyCatch": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Empty {{type}} statement."
        }
      }
    },
    "no-empty-character-class": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow empty character classes in regular expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-empty-character-class"
        },
        "schema": [],
        "messages": {
          "unexpected": "Empty class."
        }
      }
    },
    "no-empty-function": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow empty functions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-empty-function"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "enum": [
                    "functions",
                    "arrowFunctions",
                    "generatorFunctions",
                    "methods",
                    "generatorMethods",
                    "getters",
                    "setters",
                    "constructors"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Unexpected empty {{name}}."
        }
      }
    },
    "no-empty-pattern": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow empty destructuring patterns",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-empty-pattern"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected empty {{type}} pattern."
        }
      }
    },
    "no-eq-null": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `null` comparisons without type-checking operators",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-eq-null"
        },
        "schema": [],
        "messages": {
          "unexpected": "Use '===' to compare with null."
        }
      }
    },
    "no-eval": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `eval()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-eval"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowIndirect": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "eval can be harmful."
        }
      }
    },
    "no-ex-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning exceptions in `catch` clauses",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-ex-assign"
        },
        "schema": [],
        "messages": {
          "unexpected": "Do not assign to the exception parameter."
        }
      }
    },
    "no-extend-native": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow extending native types",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extend-native"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "{{builtin}} prototype is read only, properties should not be added."
        }
      }
    },
    "no-extra-bind": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary calls to `.bind()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extra-bind"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpected": "The function binding is unnecessary."
        }
      }
    },
    "no-extra-boolean-cast": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary boolean casts",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-extra-boolean-cast"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpectedCall": "Redundant Boolean call.",
          "unexpectedNegation": "Redundant double negation."
        }
      }
    },
    "no-extra-label": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary labels",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extra-label"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpected": "This label '{{name}}' is unnecessary."
        }
      }
    },
    "no-extra-parens": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow unnecessary parentheses",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extra-parens"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "functions"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "all"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "conditionalAssign": {
                      "type": "boolean"
                    },
                    "nestedBinaryExpressions": {
                      "type": "boolean"
                    },
                    "returnAssign": {
                      "type": "boolean"
                    },
                    "ignoreJSX": {
                      "enum": [
                        "none",
                        "all",
                        "single-line",
                        "multi-line"
                      ]
                    },
                    "enforceForArrowConditionals": {
                      "type": "boolean"
                    },
                    "enforceForSequenceExpressions": {
                      "type": "boolean"
                    },
                    "enforceForNewInMemberExpressions": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "unexpected": "Unnecessary parentheses around expression."
        }
      }
    },
    "no-extra-semi": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary semicolons",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-extra-semi"
        },
        "fixable": "code",
        "schema": [],
        "messages": {
          "unexpected": "Unnecessary semicolon."
        }
      }
    },
    "no-fallthrough": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow fallthrough of `case` statements",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-fallthrough"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "commentPattern": {
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "case": "Expected a 'break' statement before 'case'.",
          "default": "Expected a 'break' statement before 'default'."
        }
      }
    },
    "no-floating-decimal": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow leading or trailing decimal points in numeric literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-floating-decimal"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "leading": "A leading decimal point can be confused with a dot.",
          "trailing": "A trailing decimal point can be confused with a dot."
        }
      }
    },
    "no-func-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning `function` declarations",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-func-assign"
        },
        "schema": []
      }
    },
    "no-global-assign": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow assignments to native objects or read-only global variables",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-global-assign"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-implicit-coercion": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow shorthand type conversions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-implicit-coercion"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "boolean": {
                "type": "boolean",
                "default": true
              },
              "number": {
                "type": "boolean",
                "default": true
              },
              "string": {
                "type": "boolean",
                "default": true
              },
              "allow": {
                "type": "array",
                "items": {
                  "enum": [
                    "~",
                    "!!",
                    "+",
                    "*"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-implicit-globals": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow declarations in the global scope",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-implicit-globals"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "lexicalBindings": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "globalNonLexicalBinding": "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
          "globalLexicalBinding": "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
          "globalVariableLeak": "Global variable leak, declare the variable if it is intended to be local.",
          "assignmentToReadonlyGlobal": "Unexpected assignment to read-only global variable.",
          "redeclarationOfReadonlyGlobal": "Unexpected redeclaration of read-only global variable."
        }
      }
    },
    "no-implied-eval": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `eval()`-like methods",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-implied-eval"
        },
        "schema": []
      }
    },
    "no-import-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow assigning to imported bindings",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-import-assign"
        },
        "schema": [],
        "messages": {
          "readonly": "'{{name}}' is read-only.",
          "readonlyMember": "The members of '{{name}}' are read-only."
        }
      }
    },
    "no-inline-comments": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow inline comments after code",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-inline-comments"
        },
        "schema": []
      }
    },
    "no-inner-declarations": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow variable or `function` declarations in nested blocks",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-inner-declarations"
        },
        "schema": [
          {
            "enum": [
              "functions",
              "both"
            ]
          }
        ]
      }
    },
    "no-invalid-regexp": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow invalid regular expression strings in `RegExp` constructors",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-invalid-regexp"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowConstructorFlags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-invalid-this": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `this` keywords outside of classes or class-like objects",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-invalid-this"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "capIsConstructor": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-irregular-whitespace": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow irregular whitespace",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-irregular-whitespace"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "skipComments": {
                "type": "boolean",
                "default": false
              },
              "skipStrings": {
                "type": "boolean",
                "default": true
              },
              "skipTemplates": {
                "type": "boolean",
                "default": false
              },
              "skipRegExps": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-iterator": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of the `__iterator__` property",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-iterator"
        },
        "schema": []
      }
    },
    "no-label-var": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow labels that share a name with a variable",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-label-var"
        },
        "schema": []
      }
    },
    "no-labels": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow labeled statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-labels"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowLoop": {
                "type": "boolean",
                "default": false
              },
              "allowSwitch": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-lone-blocks": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary nested blocks",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-lone-blocks"
        },
        "schema": []
      }
    },
    "no-lonely-if": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `if` statements as the only statement in `else` blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-lonely-if"
        },
        "schema": [],
        "fixable": "code"
      }
    },
    "no-loop-func": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow function declarations that contain unsafe references inside loop statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-loop-func"
        },
        "schema": [],
        "messages": {
          "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
        }
      }
    },
    "no-magic-numbers": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow magic numbers",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-magic-numbers"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "detectObjects": {
                "type": "boolean",
                "default": false
              },
              "enforceConst": {
                "type": "boolean",
                "default": false
              },
              "ignore": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "uniqueItems": true
              },
              "ignoreArrayIndexes": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "useConst": "Number constants declarations must use 'const'.",
          "noMagic": "No magic number: {{raw}}."
        }
      }
    },
    "no-misleading-character-class": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow characters which are made with multiple code points in character class syntax",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-misleading-character-class"
        },
        "schema": [],
        "messages": {
          "surrogatePairWithoutUFlag": "Unexpected surrogate pair in character class. Use 'u' flag.",
          "combiningClass": "Unexpected combined character in character class.",
          "emojiModifier": "Unexpected modified Emoji in character class.",
          "regionalIndicatorSymbol": "Unexpected national flag in character class.",
          "zwj": "Unexpected joined character sequence in character class."
        }
      }
    },
    "no-mixed-operators": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow mixed binary operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-mixed-operators"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "+",
                      "-",
                      "*",
                      "/",
                      "%",
                      "**",
                      "&",
                      "|",
                      "^",
                      "~",
                      "<<",
                      ">>",
                      ">>>",
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<=",
                      "&&",
                      "||",
                      "in",
                      "instanceof",
                      "?:"
                    ]
                  },
                  "minItems": 2,
                  "uniqueItems": true
                },
                "uniqueItems": true
              },
              "allowSamePrecedence": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-mixed-requires": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `require` calls to be mixed with regular variable declarations",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-mixed-requires"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "object",
                "properties": {
                  "grouping": {
                    "type": "boolean"
                  },
                  "allowCall": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "no-mixed-spaces-and-tabs": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow mixed spaces and tabs for indentation",
          "category": "Stylistic Issues",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs"
        },
        "schema": [
          {
            "enum": [
              "smart-tabs",
              true,
              false
            ]
          }
        ]
      }
    },
    "no-multi-assign": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow use of chained assignment expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multi-assign"
        },
        "schema": []
      }
    },
    "no-multi-spaces": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow multiple spaces",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multi-spaces"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "object",
                "patternProperties": {
                  "^([A-Z][a-z]*)+$": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "ignoreEOLComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-multi-str": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow multiline strings",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multi-str"
        },
        "schema": []
      }
    },
    "no-multiple-empty-lines": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow multiple empty lines",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multiple-empty-lines"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "max": {
                "type": "integer",
                "minimum": 0
              },
              "maxEOF": {
                "type": "integer",
                "minimum": 0
              },
              "maxBOF": {
                "type": "integer",
                "minimum": 0
              }
            },
            "required": [
              "max"
            ],
            "additionalProperties": false
          }
        ]
      }
    },
    "no-native-reassign": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow assignments to native objects or read-only global variables",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-native-reassign"
        },
        "deprecated": true,
        "replacedBy": [
          "no-global-assign"
        ],
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-negated-condition": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow negated conditions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-negated-condition"
        },
        "schema": []
      }
    },
    "no-negated-in-lhs": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow negating the left operand in `in` expressions",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-negated-in-lhs"
        },
        "replacedBy": [
          "no-unsafe-negation"
        ],
        "deprecated": true,
        "schema": []
      }
    },
    "no-nested-ternary": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow nested ternary expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-nested-ternary"
        },
        "schema": []
      }
    },
    "no-new": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators outside of assignments or comparisons",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new"
        },
        "schema": []
      }
    },
    "no-new-func": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators with the `Function` object",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-func"
        },
        "schema": []
      }
    },
    "no-new-object": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `Object` constructors",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-object"
        },
        "schema": []
      }
    },
    "no-new-require": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators with calls to `require`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-require"
        },
        "schema": []
      }
    },
    "no-new-symbol": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow `new` operators with the `Symbol` object",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-new-symbol"
        },
        "schema": []
      }
    },
    "no-new-wrappers": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-wrappers"
        },
        "schema": []
      }
    },
    "no-obj-calls": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow calling global object properties as functions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-obj-calls"
        },
        "schema": [],
        "messages": {
          "unexpectedCall": "'{{name}}' is not a function."
        }
      }
    },
    "no-octal": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow octal literals",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-octal"
        },
        "schema": []
      }
    },
    "no-octal-escape": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow octal escape sequences in string literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-octal-escape"
        },
        "schema": [],
        "messages": {
          "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead."
        }
      }
    },
    "no-param-reassign": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow reassigning `function` parameters",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-param-reassign"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "props": {
                    "enum": [
                      false
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "props": {
                    "enum": [
                      true
                    ]
                  },
                  "ignorePropertyModificationsFor": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  },
                  "ignorePropertyModificationsForRegex": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "no-path-concat": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow string concatenation with `__dirname` and `__filename`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-path-concat"
        },
        "schema": []
      }
    },
    "no-plusplus": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the unary operators `++` and `--`",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-plusplus"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowForLoopAfterthoughts": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-process-env": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `process.env`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-process-env"
        },
        "schema": []
      }
    },
    "no-process-exit": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `process.exit()`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-process-exit"
        },
        "schema": []
      }
    },
    "no-proto": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of the `__proto__` property",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-proto"
        },
        "schema": []
      }
    },
    "no-prototype-builtins": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow calling some `Object.prototype` methods directly on objects",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-prototype-builtins"
        },
        "schema": []
      }
    },
    "no-redeclare": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow variable redeclaration",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-redeclare"
        },
        "messages": {
          "redeclared": "'{{id}}' is already defined.",
          "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
          "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "builtinGlobals": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-regex-spaces": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow multiple spaces in regular expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-regex-spaces"
        },
        "schema": [],
        "fixable": "code"
      }
    },
    "no-restricted-globals": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified global variables",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-globals"
        },
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            ]
          },
          "uniqueItems": true,
          "minItems": 0
        }
      }
    },
    "no-restricted-imports": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified modules when loaded by `import`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-imports"
        },
        "messages": {
          "path": "'{{importSource}}' import is restricted from being used.",
          "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
          "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
          "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
          "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      },
                      "importNames": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "name"
                    ]
                  }
                ]
              },
              "uniqueItems": true
            },
            {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "paths": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string",
                                "minLength": 1
                              },
                              "importNames": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "required": [
                              "name"
                            ]
                          }
                        ]
                      },
                      "uniqueItems": true
                    },
                    "patterns": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "additionalItems": false
            }
          ]
        }
      }
    },
    "no-restricted-modules": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified modules when loaded by `require`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-modules"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "name"
                    ]
                  }
                ]
              },
              "uniqueItems": true
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "paths": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "name"
                          ]
                        }
                      ]
                    },
                    "uniqueItems": true
                  },
                  "patterns": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  }
                },
                "additionalProperties": false
              },
              "additionalItems": false
            }
          ]
        }
      }
    },
    "no-restricted-properties": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow certain properties on certain objects",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-properties"
        },
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string"
                  },
                  "property": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "object"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "object": {
                    "type": "string"
                  },
                  "property": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "property"
                ]
              }
            ]
          },
          "uniqueItems": true
        }
      }
    },
    "no-restricted-syntax": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified syntax",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-syntax"
        },
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "selector": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "selector"
                ],
                "additionalProperties": false
              }
            ]
          },
          "uniqueItems": true,
          "minItems": 0
        }
      }
    },
    "no-return-assign": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow assignment operators in `return` statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-return-assign"
        },
        "schema": [
          {
            "enum": [
              "except-parens",
              "always"
            ]
          }
        ]
      }
    },
    "no-return-await": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary `return await`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-return-await"
        },
        "fixable": null,
        "schema": []
      }
    },
    "no-script-url": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `javascript:` urls",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-script-url"
        },
        "schema": []
      }
    },
    "no-self-assign": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow assignments where both sides are exactly the same",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-self-assign"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "props": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-self-compare": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow comparisons where both sides are exactly the same",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-self-compare"
        },
        "schema": []
      }
    },
    "no-sequences": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow comma operators",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-sequences"
        },
        "schema": []
      }
    },
    "no-setter-return": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow returning values from setters",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-setter-return"
        },
        "schema": [],
        "messages": {
          "returnsValue": "Setter cannot return a value."
        }
      }
    },
    "no-shadow": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow variable declarations from shadowing variables declared in the outer scope",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-shadow"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "builtinGlobals": {
                "type": "boolean",
                "default": false
              },
              "hoist": {
                "enum": [
                  "all",
                  "functions",
                  "never"
                ],
                "default": "functions"
              },
              "allow": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-shadow-restricted-names": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow identifiers from shadowing restricted names",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-shadow-restricted-names"
        },
        "schema": []
      }
    },
    "no-spaced-func": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow spacing between function identifiers and their applications (deprecated)",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-spaced-func"
        },
        "deprecated": true,
        "replacedBy": [
          "func-call-spacing"
        ],
        "fixable": "whitespace",
        "schema": []
      }
    },
    "no-sparse-arrays": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow sparse arrays",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-sparse-arrays"
        },
        "schema": []
      }
    },
    "no-sync": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow synchronous methods",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-sync"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAtRootLevel": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-tabs": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow all tabs",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-tabs"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowIndentationTabs": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-template-curly-in-string": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow template literal placeholder syntax in regular strings",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-template-curly-in-string"
        },
        "schema": []
      }
    },
    "no-ternary": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow ternary operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-ternary"
        },
        "schema": []
      }
    },
    "no-this-before-super": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow `this`/`super` before calling `super()` in constructors",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-this-before-super"
        },
        "schema": []
      }
    },
    "no-throw-literal": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow throwing literals as exceptions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-throw-literal"
        },
        "schema": [],
        "messages": {
          "object": "Expected an error object to be thrown.",
          "undef": "Do not throw undefined."
        }
      }
    },
    "no-trailing-spaces": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow trailing whitespace at the end of lines",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-trailing-spaces"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "skipBlankLines": {
                "type": "boolean",
                "default": false
              },
              "ignoreComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-undef": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-undef"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "typeof": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "undef": "'{{name}}' is not defined."
        }
      }
    },
    "no-undef-init": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow initializing variables to `undefined`",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-undef-init"
        },
        "schema": [],
        "fixable": "code"
      }
    },
    "no-undefined": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `undefined` as an identifier",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-undefined"
        },
        "schema": []
      }
    },
    "no-underscore-dangle": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow dangling underscores in identifiers",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-underscore-dangle"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "allowAfterThis": {
                "type": "boolean",
                "default": false
              },
              "allowAfterSuper": {
                "type": "boolean",
                "default": false
              },
              "allowAfterThisConstructor": {
                "type": "boolean",
                "default": false
              },
              "enforceInMethodNames": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-unexpected-multiline": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow confusing multiline expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unexpected-multiline"
        },
        "schema": [],
        "messages": {
          "function": "Unexpected newline between function and ( of function call.",
          "property": "Unexpected newline between object and [ of property access.",
          "taggedTemplate": "Unexpected newline between template tag and template literal.",
          "division": "Unexpected newline between numerator and division operator."
        }
      }
    },
    "no-unmodified-loop-condition": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow unmodified loop conditions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unmodified-loop-condition"
        },
        "schema": []
      }
    },
    "no-unneeded-ternary": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow ternary operators when simpler alternatives exist",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unneeded-ternary"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "defaultAssignment": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    },
    "no-unreachable": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unreachable"
        },
        "schema": []
      }
    },
    "no-unsafe-finally": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow control flow statements in `finally` blocks",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unsafe-finally"
        },
        "schema": []
      }
    },
    "no-unsafe-negation": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow negating the left operand of relational operators",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unsafe-negation",
          "suggestion": true
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForOrderingRelations": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": null,
        "messages": {
          "unexpected": "Unexpected negating the left operand of '{{operator}}' operator.",
          "suggestNegatedExpression": "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
          "suggestParenthesisedNegation": "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
        }
      }
    },
    "no-unused-expressions": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unused expressions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unused-expressions"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowShortCircuit": {
                "type": "boolean",
                "default": false
              },
              "allowTernary": {
                "type": "boolean",
                "default": false
              },
              "allowTaggedTemplates": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-unused-labels": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unused labels",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unused-labels"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unused": "'{{name}}:' is defined but never used."
        }
      }
    },
    "no-unused-vars": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow unused variables",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unused-vars"
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "all",
                  "local"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "vars": {
                    "enum": [
                      "all",
                      "local"
                    ]
                  },
                  "varsIgnorePattern": {
                    "type": "string"
                  },
                  "args": {
                    "enum": [
                      "all",
                      "after-used",
                      "none"
                    ]
                  },
                  "ignoreRestSiblings": {
                    "type": "boolean"
                  },
                  "argsIgnorePattern": {
                    "type": "string"
                  },
                  "caughtErrors": {
                    "enum": [
                      "all",
                      "none"
                    ]
                  },
                  "caughtErrorsIgnorePattern": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "no-use-before-define": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow the use of variables before they are defined",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-use-before-define"
        },
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "nofunc"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "functions": {
                    "type": "boolean"
                  },
                  "classes": {
                    "type": "boolean"
                  },
                  "variables": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "no-useless-call": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary calls to `.call()` and `.apply()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-call"
        },
        "schema": []
      }
    },
    "no-useless-catch": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary `catch` clauses",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-useless-catch"
        },
        "schema": []
      }
    },
    "no-useless-computed-key": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary computed property keys in objects and classes",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-computed-key"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForClassMembers": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    },
    "no-useless-concat": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary concatenation of literals or template literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-concat"
        },
        "schema": []
      }
    },
    "no-useless-constructor": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary constructors",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-constructor"
        },
        "schema": []
      }
    },
    "no-useless-escape": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary escape characters",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-useless-escape",
          "suggestion": true
        },
        "messages": {
          "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
          "removeEscape": "Remove the `\\`. This maintains the current functionality.",
          "escapeBackslash": "Replace the `\\` with `\\\\` to include the actual backslash character."
        },
        "schema": []
      }
    },
    "no-useless-rename": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow renaming import, export, and destructured assignments to the same name",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-rename"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              },
              "ignoreImport": {
                "type": "boolean",
                "default": false
              },
              "ignoreExport": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-useless-return": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow redundant return statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-return"
        },
        "fixable": "code",
        "schema": []
      }
    },
    "no-var": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `let` or `const` instead of `var`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-var"
        },
        "schema": [],
        "fixable": "code"
      }
    },
    "no-void": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `void` operators",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-void"
        },
        "schema": []
      }
    },
    "no-warning-comments": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified warning terms in comments",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-warning-comments"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "terms": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "location": {
                "enum": [
                  "start",
                  "anywhere"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "no-whitespace-before-property": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "disallow whitespace before properties",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-whitespace-before-property"
        },
        "fixable": "whitespace",
        "schema": []
      }
    },
    "no-with": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `with` statements",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-with"
        },
        "schema": []
      }
    },
    "nonblock-statement-body-position": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce the location of single-line statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/nonblock-statement-body-position"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "beside",
              "below",
              "any"
            ]
          },
          {
            "properties": {
              "overrides": {
                "properties": {
                  "if": {
                    "enum": [
                      "beside",
                      "below",
                      "any"
                    ]
                  },
                  "else": {
                    "enum": [
                      "beside",
                      "below",
                      "any"
                    ]
                  },
                  "while": {
                    "enum": [
                      "beside",
                      "below",
                      "any"
                    ]
                  },
                  "do": {
                    "enum": [
                      "beside",
                      "below",
                      "any"
                    ]
                  },
                  "for": {
                    "enum": [
                      "beside",
                      "below",
                      "any"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "object-curly-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent line breaks inside braces",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-curly-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "oneOf": [
                  {
                    "enum": [
                      "always",
                      "never"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multiline": {
                        "type": "boolean"
                      },
                      "minProperties": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "consistent": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "minProperties": 1
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "ObjectExpression": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  },
                  "ObjectPattern": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  },
                  "ImportDeclaration": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  },
                  "ExportDeclaration": {
                    "oneOf": [
                      {
                        "enum": [
                          "always",
                          "never"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "minProperties": 1
              }
            ]
          }
        ]
      }
    },
    "object-curly-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside braces",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-curly-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "arraysInObjects": {
                "type": "boolean"
              },
              "objectsInObjects": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "object-property-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce placing object properties on separate lines",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-property-newline"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAllPropertiesOnSameLine": {
                "type": "boolean",
                "default": false
              },
              "allowMultiplePropertiesPerLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "whitespace"
      }
    },
    "object-shorthand": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow method and property shorthand syntax for object literals",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-shorthand"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "methods",
                    "properties",
                    "never",
                    "consistent",
                    "consistent-as-needed"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "methods",
                    "properties"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "avoidQuotes": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "methods"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "ignoreConstructors": {
                      "type": "boolean"
                    },
                    "avoidQuotes": {
                      "type": "boolean"
                    },
                    "avoidExplicitReturnArrows": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        }
      }
    },
    "one-var": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce variables to be declared either together or separately in functions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/one-var"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "consecutive"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "separateRequires": {
                    "type": "boolean"
                  },
                  "var": {
                    "enum": [
                      "always",
                      "never",
                      "consecutive"
                    ]
                  },
                  "let": {
                    "enum": [
                      "always",
                      "never",
                      "consecutive"
                    ]
                  },
                  "const": {
                    "enum": [
                      "always",
                      "never",
                      "consecutive"
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "initialized": {
                    "enum": [
                      "always",
                      "never",
                      "consecutive"
                    ]
                  },
                  "uninitialized": {
                    "enum": [
                      "always",
                      "never",
                      "consecutive"
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "one-var-declaration-per-line": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow newlines around variable declarations",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/one-var-declaration-per-line"
        },
        "schema": [
          {
            "enum": [
              "always",
              "initializations"
            ]
          }
        ],
        "fixable": "whitespace"
      }
    },
    "operator-assignment": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow assignment operator shorthand where possible",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/operator-assignment"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ],
        "fixable": "code",
        "messages": {
          "replaced": "Assignment can be replaced with operator assignment.",
          "unexpected": "Unexpected operator assignment shorthand."
        }
      }
    },
    "operator-linebreak": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent linebreak style for operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/operator-linebreak"
        },
        "schema": [
          {
            "enum": [
              "after",
              "before",
              "none",
              null
            ]
          },
          {
            "type": "object",
            "properties": {
              "overrides": {
                "type": "object",
                "properties": {
                  "anyOf": {
                    "type": "string",
                    "enum": [
                      "after",
                      "before",
                      "none",
                      "ignore"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    },
    "padded-blocks": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow padding within blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/padded-blocks"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "blocks": {
                    "enum": [
                      "always",
                      "never"
                    ]
                  },
                  "switches": {
                    "enum": [
                      "always",
                      "never"
                    ]
                  },
                  "classes": {
                    "enum": [
                      "always",
                      "never"
                    ]
                  }
                },
                "additionalProperties": false,
                "minProperties": 1
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "allowSingleLineBlocks": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "padding-line-between-statements": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow padding lines between statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/padding-line-between-statements"
        },
        "fixable": "whitespace",
        "schema": {
          "definitions": {
            "paddingType": {
              "enum": [
                "any",
                "never",
                "always"
              ]
            },
            "statementType": {
              "anyOf": [
                {
                  "enum": [
                    "*",
                    "block-like",
                    "cjs-export",
                    "cjs-import",
                    "directive",
                    "expression",
                    "iife",
                    "multiline-block-like",
                    "multiline-expression",
                    "multiline-const",
                    "multiline-let",
                    "multiline-var",
                    "singleline-const",
                    "singleline-let",
                    "singleline-var",
                    "block",
                    "empty",
                    "function",
                    "break",
                    "case",
                    "class",
                    "const",
                    "continue",
                    "debugger",
                    "default",
                    "do",
                    "export",
                    "for",
                    "if",
                    "import",
                    "let",
                    "return",
                    "switch",
                    "throw",
                    "try",
                    "var",
                    "while",
                    "with"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "*",
                      "block-like",
                      "cjs-export",
                      "cjs-import",
                      "directive",
                      "expression",
                      "iife",
                      "multiline-block-like",
                      "multiline-expression",
                      "multiline-const",
                      "multiline-let",
                      "multiline-var",
                      "singleline-const",
                      "singleline-let",
                      "singleline-var",
                      "block",
                      "empty",
                      "function",
                      "break",
                      "case",
                      "class",
                      "const",
                      "continue",
                      "debugger",
                      "default",
                      "do",
                      "export",
                      "for",
                      "if",
                      "import",
                      "let",
                      "return",
                      "switch",
                      "throw",
                      "try",
                      "var",
                      "while",
                      "with"
                    ]
                  },
                  "minItems": 1,
                  "uniqueItems": true,
                  "additionalItems": false
                }
              ]
            }
          },
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "blankLine": {
                "$ref": "#/definitions/paddingType"
              },
              "prev": {
                "$ref": "#/definitions/statementType"
              },
              "next": {
                "$ref": "#/definitions/statementType"
              }
            },
            "additionalProperties": false,
            "required": [
              "blankLine",
              "prev",
              "next"
            ]
          },
          "additionalItems": false
        }
      }
    },
    "prefer-arrow-callback": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require using arrow functions for callbacks",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-arrow-callback"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowNamedFunctions": {
                "type": "boolean",
                "default": false
              },
              "allowUnboundThis": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    },
    "prefer-const": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `const` declarations for variables that are never reassigned after declared",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-const"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "destructuring": {
                "enum": [
                  "any",
                  "all"
                ],
                "default": "any"
              },
              "ignoreReadBeforeAssign": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "useConst": "'{{name}}' is never reassigned. Use 'const' instead."
        }
      }
    },
    "prefer-destructuring": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require destructuring from arrays and/or objects",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-destructuring"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "VariableDeclarator": {
                    "type": "object",
                    "properties": {
                      "array": {
                        "type": "boolean"
                      },
                      "object": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "AssignmentExpression": {
                    "type": "object",
                    "properties": {
                      "array": {
                        "type": "boolean"
                      },
                      "object": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "array": {
                    "type": "boolean"
                  },
                  "object": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "enforceForRenamedProperties": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "prefer-exponentiation-operator": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `Math.pow` in favor of the `**` operator",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-exponentiation-operator"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "useExponentiation": "Use the '**' operator instead of 'Math.pow'."
        }
      }
    },
    "prefer-named-capture-group": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce using named capture group in regular expression",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-named-capture-group"
        },
        "schema": [],
        "messages": {
          "required": "Capture group '{{group}}' should be converted to a named or non-capturing group."
        }
      }
    },
    "prefer-numeric-literals": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-numeric-literals"
        },
        "schema": [],
        "messages": {
          "useLiteral": "Use {{system}} literals instead of {{functionName}}()."
        },
        "fixable": "code"
      }
    },
    "prefer-object-spread": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-object-spread"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "useSpreadMessage": "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
          "useLiteralMessage": "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
        }
      }
    },
    "prefer-promise-reject-errors": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require using Error objects as Promise rejection reasons",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-promise-reject-errors"
        },
        "fixable": null,
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowEmptyReject": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "prefer-reflect": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `Reflect` methods where applicable",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-reflect"
        },
        "deprecated": true,
        "replacedBy": [],
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "enum": [
                    "apply",
                    "call",
                    "delete",
                    "defineProperty",
                    "getOwnPropertyDescriptor",
                    "getPrototypeOf",
                    "setPrototypeOf",
                    "isExtensible",
                    "getOwnPropertyNames",
                    "preventExtensions"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "prefer-regex-literals": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow use of the `RegExp` constructor in favor of regular expression literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-regex-literals"
        },
        "schema": [],
        "messages": {
          "unexpectedRegExp": "Use a regular expression literal instead of the 'RegExp' constructor."
        }
      }
    },
    "prefer-rest-params": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require rest parameters instead of `arguments`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-rest-params"
        },
        "schema": []
      }
    },
    "prefer-spread": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require spread operators instead of `.apply()`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-spread"
        },
        "schema": [],
        "fixable": null
      }
    },
    "prefer-template": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require template literals instead of string concatenation",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-template"
        },
        "schema": [],
        "fixable": "code"
      }
    },
    "quote-props": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require quotes around object literal property names",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/quote-props"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "as-needed",
                    "consistent",
                    "consistent-as-needed"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "as-needed",
                    "consistent",
                    "consistent-as-needed"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "keywords": {
                      "type": "boolean"
                    },
                    "unnecessary": {
                      "type": "boolean"
                    },
                    "numbers": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "fixable": "code"
      }
    },
    "quotes": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce the consistent use of either backticks, double, or single quotes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/quotes"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "single",
              "double",
              "backtick"
            ]
          },
          {
            "anyOf": [
              {
                "enum": [
                  "avoid-escape"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "avoidEscape": {
                    "type": "boolean"
                  },
                  "allowTemplateLiterals": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "radix": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the consistent use of the radix argument when using `parseInt()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/radix"
        },
        "schema": [
          {
            "enum": [
              "always",
              "as-needed"
            ]
          }
        ]
      }
    },
    "require-atomic-updates": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-atomic-updates"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "nonAtomicUpdate": "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`."
        }
      }
    },
    "require-await": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "disallow async functions which have no `await` expression",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-await"
        },
        "schema": []
      }
    },
    "require-jsdoc": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require JSDoc comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-jsdoc"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "require": {
                "type": "object",
                "properties": {
                  "ClassDeclaration": {
                    "type": "boolean",
                    "default": false
                  },
                  "MethodDefinition": {
                    "type": "boolean",
                    "default": false
                  },
                  "FunctionDeclaration": {
                    "type": "boolean",
                    "default": true
                  },
                  "ArrowFunctionExpression": {
                    "type": "boolean",
                    "default": false
                  },
                  "FunctionExpression": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "default": {}
              }
            },
            "additionalProperties": false
          }
        ],
        "deprecated": true,
        "replacedBy": []
      }
    },
    "require-unicode-regexp": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the use of `u` flag on RegExp",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-unicode-regexp"
        },
        "messages": {
          "requireUFlag": "Use the 'u' flag."
        },
        "schema": []
      }
    },
    "require-yield": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require generator functions to contain `yield`",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/require-yield"
        },
        "schema": []
      }
    },
    "rest-spread-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce spacing between rest and spread operators and their expressions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/rest-spread-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "semi": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow semicolons instead of ASI",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/semi"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "beforeStatementContinuationChars": {
                      "enum": [
                        "always",
                        "any",
                        "never"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "omitLastInOneLineBlock": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        }
      }
    },
    "semi-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after semicolons",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/semi-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": false
              },
              "after": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "semi-style": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce location of semicolons",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/semi-style"
        },
        "schema": [
          {
            "enum": [
              "last",
              "first"
            ]
          }
        ],
        "fixable": "whitespace"
      }
    },
    "sort-imports": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce sorted import declarations within modules",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/sort-imports"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreCase": {
                "type": "boolean",
                "default": false
              },
              "memberSyntaxSortOrder": {
                "type": "array",
                "items": {
                  "enum": [
                    "none",
                    "all",
                    "multiple",
                    "single"
                  ]
                },
                "uniqueItems": true,
                "minItems": 4,
                "maxItems": 4
              },
              "ignoreDeclarationSort": {
                "type": "boolean",
                "default": false
              },
              "ignoreMemberSort": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    },
    "sort-keys": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require object keys to be sorted",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/sort-keys"
        },
        "schema": [
          {
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "type": "object",
            "properties": {
              "caseSensitive": {
                "type": "boolean",
                "default": true
              },
              "natural": {
                "type": "boolean",
                "default": false
              },
              "minKeys": {
                "type": "integer",
                "minimum": 2,
                "default": 2
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "sort-vars": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require variables within the same declaration block to be sorted",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/sort-vars"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreCase": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    },
    "space-before-blocks": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-before-blocks"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "keywords": {
                    "enum": [
                      "always",
                      "never",
                      "off"
                    ]
                  },
                  "functions": {
                    "enum": [
                      "always",
                      "never",
                      "off"
                    ]
                  },
                  "classes": {
                    "enum": [
                      "always",
                      "never",
                      "off"
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "space-before-function-paren": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before `function` definition opening parenthesis",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-before-function-paren"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "anonymous": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  },
                  "named": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  },
                  "asyncArrow": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "space-in-parens": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside parentheses",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-in-parens"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "enum": [
                    "{}",
                    "[]",
                    "()",
                    "empty"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingOpeningSpace": "There must be a space after this paren.",
          "missingClosingSpace": "There must be a space before this paren.",
          "rejectedOpeningSpace": "There should be no space after this paren.",
          "rejectedClosingSpace": "There should be no space before this paren."
        }
      }
    },
    "space-infix-ops": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require spacing around infix operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-infix-ops"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "int32Hint": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "space-unary-ops": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before or after unary operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-unary-ops"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "words": {
                "type": "boolean",
                "default": true
              },
              "nonwords": {
                "type": "boolean",
                "default": false
              },
              "overrides": {
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
          "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
          "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
          "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
          "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
          "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
        }
      }
    },
    "spaced-comment": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce consistent spacing after the `//` or `/*` in a comment",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/spaced-comment"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "markers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "line": {
                "type": "object",
                "properties": {
                  "exceptions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "markers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              },
              "block": {
                "type": "object",
                "properties": {
                  "exceptions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "markers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "balanced": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "strict": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow strict mode directives",
          "category": "Strict Mode",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/strict"
        },
        "schema": [
          {
            "enum": [
              "never",
              "global",
              "function",
              "safe"
            ]
          }
        ],
        "fixable": "code",
        "messages": {
          "function": "Use the function form of 'use strict'.",
          "global": "Use the global form of 'use strict'.",
          "multiple": "Multiple 'use strict' directives.",
          "never": "Strict mode is not permitted.",
          "unnecessary": "Unnecessary 'use strict' directive.",
          "module": "'use strict' is unnecessary inside of modules.",
          "implied": "'use strict' is unnecessary when implied strict mode is enabled.",
          "unnecessaryInClasses": "'use strict' is unnecessary inside of classes.",
          "nonSimpleParameterList": "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
          "wrap": "Wrap {{name}} in a function with 'use strict' directive."
        }
      }
    },
    "switch-colon-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "enforce spacing around colons of switch statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/switch-colon-spacing"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": {
                "type": "boolean",
                "default": false
              },
              "after": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "expectedBefore": "Expected space(s) before this colon.",
          "expectedAfter": "Expected space(s) after this colon.",
          "unexpectedBefore": "Unexpected space(s) before this colon.",
          "unexpectedAfter": "Unexpected space(s) after this colon."
        }
      }
    },
    "symbol-description": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require symbol descriptions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/symbol-description"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "expected": "Expected Symbol to have a description."
        }
      }
    },
    "template-curly-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing around embedded expressions of template strings",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/template-curly-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ],
        "messages": {
          "expectedBefore": "Expected space(s) before '}'.",
          "expectedAfter": "Expected space(s) after '${'.",
          "unexpectedBefore": "Unexpected space(s) before '}'.",
          "unexpectedAfter": "Unexpected space(s) after '${'."
        }
      }
    },
    "template-tag-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing between template tags and their literals",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/template-tag-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ],
        "messages": {
          "unexpected": "Unexpected space between template tag and template literal.",
          "missing": "Missing space between template tag and template literal."
        }
      }
    },
    "unicode-bom": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow Unicode byte order mark (BOM)",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/unicode-bom"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ],
        "messages": {
          "expected": "Expected Unicode BOM (Byte Order Mark).",
          "unexpected": "Unexpected Unicode BOM (Byte Order Mark)."
        }
      }
    },
    "use-isnan": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "require calls to `isNaN()` when checking for `NaN`",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/use-isnan"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForSwitchCase": {
                "type": "boolean",
                "default": false
              },
              "enforceForIndexOf": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "comparisonWithNaN": "Use the isNaN function to compare with NaN.",
          "switchNaN": "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
          "caseNaN": "'case NaN' can never match. Use Number.isNaN before the switch.",
          "indexOfNaN": "Array prototype method '{{ methodName }}' cannot find NaN."
        }
      }
    },
    "valid-jsdoc": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "enforce valid JSDoc comments",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/valid-jsdoc"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "prefer": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "preferType": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "requireReturn": {
                "type": "boolean",
                "default": true
              },
              "requireParamDescription": {
                "type": "boolean",
                "default": true
              },
              "requireReturnDescription": {
                "type": "boolean",
                "default": true
              },
              "matchDescription": {
                "type": "string"
              },
              "requireReturnType": {
                "type": "boolean",
                "default": true
              },
              "requireParamType": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unexpectedTag": "Unexpected @{{title}} tag; function has no return statement.",
          "expected": "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.",
          "use": "Use @{{name}} instead.",
          "useType": "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.",
          "syntaxError": "JSDoc syntax error.",
          "missingBrace": "JSDoc type missing brace.",
          "missingParamDesc": "Missing JSDoc parameter description for '{{name}}'.",
          "missingParamType": "Missing JSDoc parameter type for '{{name}}'.",
          "missingReturnType": "Missing JSDoc return type.",
          "missingReturnDesc": "Missing JSDoc return description.",
          "missingReturn": "Missing JSDoc @{{returns}} for function.",
          "missingParam": "Missing JSDoc for parameter '{{name}}'.",
          "duplicateParam": "Duplicate JSDoc parameter '{{name}}'.",
          "unsatisfiedDesc": "JSDoc description does not satisfy the regex pattern."
        },
        "deprecated": true,
        "replacedBy": []
      }
    },
    "valid-typeof": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "enforce comparing `typeof` expressions against valid strings",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/valid-typeof"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "requireStringLiterals": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "invalidValue": "Invalid typeof comparison value.",
          "notString": "Typeof comparisons should be to string literals."
        }
      }
    },
    "vars-on-top": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require `var` declarations be placed at the top of their containing scope",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/vars-on-top"
        },
        "schema": [],
        "messages": {
          "top": "All 'var' declarations must be at the top of the function scope."
        }
      }
    },
    "wrap-iife": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require parentheses around immediate `function` invocations",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/wrap-iife"
        },
        "schema": [
          {
            "enum": [
              "outside",
              "inside",
              "any"
            ]
          },
          {
            "type": "object",
            "properties": {
              "functionPrototypeMethods": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
          "wrapExpression": "Wrap only the function expression in parens.",
          "moveInvocation": "Move the invocation into the parens that contain the function."
        }
      }
    },
    "wrap-regex": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require parenthesis around regex literals",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/wrap-regex"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
        }
      }
    },
    "yield-star-spacing": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing around the `*` in `yield*` expressions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/yield-star-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "before",
                  "after",
                  "both",
                  "neither"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "before": {
                    "type": "boolean"
                  },
                  "after": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "missingBefore": "Missing space before *.",
          "missingAfter": "Missing space after *.",
          "unexpectedBefore": "Unexpected space before *.",
          "unexpectedAfter": "Unexpected space after *."
        }
      }
    },
    "yoda": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow \"Yoda\" conditions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/yoda"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "exceptRange": {
                "type": "boolean",
                "default": false
              },
              "onlyEquality": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "expected": "Expected literal to be on the {{expectedSide}} side of {{operator}}."
        }
      }
    }
  },
  "jest": {
    "jest/consistent-test-it": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Have control over `test` and `it` usages",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/consistent-test-it.md"
        },
        "fixable": "code",
        "messages": {
          "consistentMethod": "Prefer using '{{ testKeyword }}' instead of '{{ oppositeTestKeyword }}'",
          "consistentMethodWithinDescribe": "Prefer using '{{ testKeywordWithinDescribe }}' instead of '{{ oppositeTestKeyword }}' within describe"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "fn": {
                "enum": [
                  "it",
                  "test"
                ]
              },
              "withinDescribe": {
                "enum": [
                  "it",
                  "test"
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "suggestion"
      }
    },
    "jest/expect-expect": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Enforce assertion to be made in a test body",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/expect-expect.md"
        },
        "messages": {
          "noAssertions": "Test has no assertions"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "assertFunctionNames": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "suggestion"
      }
    },
    "jest/lowercase-name": {
      "meta": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce `it`, `test` and `describe` to have descriptions that begin with a lowercase letter. This provides more readable test failures.",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/lowercase-name.md"
        },
        "fixable": "code",
        "messages": {
          "unexpectedLowercase": "`{{ method }}`s should begin with lowercase"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignore": {
                "type": "array",
                "items": {
                  "enum": [
                    "describe",
                    "test",
                    "it"
                  ]
                },
                "additionalItems": false
              },
              "allowedPrefixes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "additionalItems": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "jest/no-alias-methods": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow alias methods",
          "recommended": "warn",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-alias-methods.md"
        },
        "messages": {
          "replaceAlias": "Replace {{ alias }}() with its canonical name of {{ canonical }}()"
        },
        "fixable": "code",
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/no-commented-out-tests": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "This rule raises a warning about commented out tests. It's similar to no-disabled-tests rule.",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-commented-out-tests.md"
        },
        "messages": {
          "commentedTests": "Some tests seem to be commented"
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-deprecated-functions": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow use of deprecated functions",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-deprecated-functions.md"
        },
        "messages": {
          "deprecatedFunction": "`{{ deprecation }}` has been deprecated in favor of `{{ replacement }}`"
        },
        "type": "suggestion",
        "schema": [],
        "fixable": "code"
      }
    },
    "jest/no-disabled-tests": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow disabled tests",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-disabled-tests.md"
        },
        "messages": {
          "missingFunction": "Test is missing function argument",
          "skippedTestSuite": "Skipped test suite",
          "skippedTest": "Skipped test",
          "pending": "Call to pending()",
          "pendingSuite": "Call to pending() within test suite",
          "pendingTest": "Call to pending() within test",
          "disabledSuite": "Disabled test suite",
          "disabledTest": "Disabled test"
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-duplicate-hooks": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow duplicate setup and teardown hooks",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-duplicate-hooks.md"
        },
        "messages": {
          "noDuplicateHook": "Duplicate {{hook}} in describe block"
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-expect-resolves": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow expect.resolves",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-expect-resolves.md"
        },
        "messages": {
          "expectResolves": "Use `expect(await promise)` instead."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-export": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Prevents exports from test files. If a file has at least 1 test in it, then this rule will prevent exports.",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-export.md"
        },
        "messages": {
          "unexpectedExport": "Do not export from a test file."
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/no-focused-tests": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow focused tests",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-focused-tests.md"
        },
        "messages": {
          "focusedTest": "Unexpected focused test."
        },
        "fixable": "code",
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-hooks": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow setup and teardown hooks",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-hooks.md"
        },
        "messages": {
          "unexpectedHook": "Unexpected '{{ hookName }}' hook"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "contains": [
                  "beforeAll",
                  "beforeEach",
                  "afterAll",
                  "afterEach"
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "suggestion"
      }
    },
    "jest/no-identical-title": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow identical titles",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-identical-title.md"
        },
        "messages": {
          "multipleTestTitle": "Test title is used multiple times in the same describe block.",
          "multipleDescribeTitle": "Describe block title is used multiple times in the same describe block."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-if": {
      "meta": {
        "docs": {
          "description": "Disallow conditional logic",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-if.md"
        },
        "messages": {
          "noConditionalExpect": "Test should not contain { condition } statements."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-jasmine-globals": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow Jasmine globals",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-jasmine-globals.md"
        },
        "messages": {
          "illegalGlobal": "Illegal usage of global `{{ global }}`, prefer `{{ replacement }}`",
          "illegalMethod": "Illegal usage of `{{ method }}`, prefer `{{ replacement }}`",
          "illegalFail": "Illegal usage of `fail`, prefer throwing an error, or the `done.fail` callback",
          "illegalPending": "Illegal usage of `pending`, prefer explicitly skipping a test using `test.skip`",
          "illegalJasmine": "Illegal usage of jasmine global"
        },
        "fixable": "code",
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-jest-import": {
      "meta": {
        "type": "problem",
        "docs": {
          "description": "The `jest` object is automatically in scope within every test file. The methods in the `jest` object help create mocks and let you control Jest's overall behavior. It is therefore completely unnecessary to import in `jest`, as Jest doesn't export anything in the first place.",
          "category": "Best Practices",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-jest-import.md"
        },
        "messages": {
          "unexpectedImport": "Jest is automatically in scope. Do not import \"jest\", as Jest doesn't export anything."
        },
        "schema": []
      }
    },
    "jest/no-large-snapshots": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "disallow large snapshots",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-large-snapshots.md"
        },
        "messages": {
          "noSnapshot": "`{{ lineCount }}`s should begin with lowercase",
          "tooLongSnapshots": "Expected Jest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long"
        },
        "type": "suggestion",
        "schema": [
          {
            "type": "object",
            "properties": {
              "maxSize": {
                "type": "number"
              },
              "inlineMaxSize": {
                "type": "number"
              },
              "whitelistedSnapshots": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "array"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "jest/no-mocks-import": {
      "meta": {
        "type": "problem",
        "docs": {
          "category": "Best Practices",
          "description": "When using `jest.mock`, your tests (just like the code being tested) should import from `./x`, not `./__mocks__/x`. Not following this rule can lead to confusion, because you will have multiple instances of the mocked module",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-mocks-import.md"
        },
        "messages": {
          "noManualImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use jest.mock and import from the original module path."
        },
        "schema": []
      }
    },
    "jest/no-standalone-expect": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Prevents expects that are outside of an it or test block.",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-standalone-expect.md"
        },
        "messages": {
          "unexpectedExpect": "Expect must be inside of a test block."
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/no-test-callback": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Avoid using a callback in asynchronous tests",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-test-callback.md"
        },
        "messages": {
          "illegalTestCallback": "Illegal usage of test callback",
          "useAwaitInsteadOfCallback": "Use await instead of callback in async functions"
        },
        "fixable": "code",
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-test-prefixes": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Use `.only` and `.skip` over `f` and `x`",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-test-prefixes.md"
        },
        "messages": {
          "usePreferredName": "Use \"{{ preferredNodeName }}\" instead"
        },
        "fixable": "code",
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-test-return-statement": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow explicitly returning from tests",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-test-return-statement.md"
        },
        "messages": {
          "noReturnValue": "Jest tests should not return a value."
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/no-truthy-falsy": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Disallow using `toBeTruthy()` & `toBeFalsy()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-truthy-falsy.md"
        },
        "messages": {
          "avoidMatcher": "Avoid {{ matcherName }}"
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/no-try-expect": {
      "meta": {
        "docs": {
          "description": "Prefer using toThrow for exception tests",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/no-try-expect.md"
        },
        "messages": {
          "noTryExpect": "Tests should use Jest‘s exception helpers. Use \"expect(() => yourFunction()).toThrow()\" for synchronous tests, or \"await expect(yourFunction()).rejects.toThrow()\" for async tests"
        },
        "type": "problem",
        "schema": []
      }
    },
    "jest/prefer-called-with": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `toBeCalledWith()` OR `toHaveBeenCalledWith()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-called-with.md"
        },
        "messages": {
          "preferCalledWith": "Prefer {{name}}With(/* expected args */)"
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-expect-assertions": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `expect.assertions()` OR `expect.hasAssertions()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-expect-assertions.md"
        },
        "messages": {
          "haveExpectAssertions": "Every test should have either `expect.assertions(<number of assertions>)` or `expect.hasAssertions()` as its first expression"
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-hooks-on-top": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest to have all hooks at top level",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-hooks-on-top.md"
        },
        "messages": {
          "noHookOnTop": "Move all hooks before test cases"
        },
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/prefer-inline-snapshots": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using inline snapshots",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-inline-snapshots.md"
        },
        "messages": {
          "toMatch": "Use toMatchInlineSnapshot() instead",
          "toMatchError": "Use toThrowErrorMatchingInlineSnapshot() instead"
        },
        "fixable": "code",
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/prefer-spy-on": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `jest.spyOn()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-spy-on.md"
        },
        "messages": {
          "useJestSpyOn": "Use jest.spyOn() instead."
        },
        "fixable": "code",
        "schema": [],
        "type": "suggestion"
      }
    },
    "jest/prefer-strict-equal": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using toStrictEqual()",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-strict-equal.md"
        },
        "messages": {
          "useToStrictEqual": "Use toStrictEqual() instead"
        },
        "fixable": "code",
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-to-be-null": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `toBeNull()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-to-be-null.md"
        },
        "messages": {
          "useToBeNull": "Use toBeNull() instead"
        },
        "fixable": "code",
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-to-be-undefined": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `toBeUndefined()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-to-be-undefined.md"
        },
        "messages": {
          "useToBeUndefined": "Use toBeUndefined() instead"
        },
        "fixable": "code",
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-to-contain": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `toContain()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-to-contain.md"
        },
        "messages": {
          "useToContain": "Use toContain() instead"
        },
        "fixable": "code",
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-to-have-length": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `toHaveLength()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-to-have-length.md"
        },
        "messages": {
          "useToHaveLength": "Use toHaveLength() instead"
        },
        "fixable": "code",
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/prefer-todo": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Suggest using `test.todo`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/prefer-todo.md"
        },
        "messages": {
          "emptyTest": "Prefer todo test case over empty test case",
          "unimplementedTest": "Prefer todo test case over unimplemented test case"
        },
        "fixable": "code",
        "schema": [],
        "type": "layout"
      }
    },
    "jest/require-to-throw-message": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Require a message for `toThrow()`",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/require-to-throw-message.md"
        },
        "messages": {
          "addErrorMessage": "Add an error message to {{ matcherName }}()"
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/require-top-level-describe": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Prevents test cases and hooks to be outside of a describe block",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/require-top-level-describe.md"
        },
        "messages": {
          "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
          "unexpectedHook": "All hooks must be wrapped in a describe block."
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/valid-describe": {
      "meta": {
        "type": "problem",
        "docs": {
          "category": "Possible Errors",
          "description": "Using an improper `describe()` callback function can lead to unexpected test errors.",
          "recommended": "warn",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/valid-describe.md"
        },
        "messages": {
          "nameAndCallback": "Describe requires name and callback arguments",
          "secondArgumentMustBeFunction": "Second argument must be function",
          "noAsyncDescribeCallback": "No async describe callback",
          "unexpectedDescribeArgument": "Unexpected argument(s) in describe callback",
          "unexpectedReturnInDescribe": "Unexpected return statement in describe callback"
        },
        "schema": []
      }
    },
    "jest/valid-expect-in-promise": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Enforce having return statement when testing with promises",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/valid-expect-in-promise.md"
        },
        "messages": {
          "returnPromise": "Promise should be returned to test its fulfillment or rejection"
        },
        "type": "suggestion",
        "schema": []
      }
    },
    "jest/valid-expect": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Enforce valid `expect()` usage",
          "recommended": "error",
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/valid-expect.md"
        },
        "messages": {
          "incorrectNumberOfArguments": "Expect takes one and only one argument.",
          "modifierUnknown": "Expect has no modifier named \"{{ modifierName }}\".",
          "matcherNotFound": "Expect must have a corresponding matcher call.",
          "matcherNotCalled": "Matchers must be called to assert.",
          "asyncMustBeAwaited": "Async assertions must be awaited{{ orReturned }}.",
          "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{ orReturned }}."
        },
        "type": "suggestion",
        "schema": [
          {
            "type": "object",
            "properties": {
              "alwaysAwait": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "jest/valid-title": {
      "meta": {
        "docs": {
          "category": "Best Practices",
          "description": "Enforce valid titles",
          "recommended": false,
          "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v23.9.0/docs/rules/valid-title.md"
        },
        "messages": {
          "titleMustBeString": "Title must be a string",
          "emptyTitle": "{{ jestFunctionName }} should not have an empty title",
          "duplicatePrefix": "should not have duplicate prefix",
          "accidentalSpace": "should not have leading or trailing spaces",
          "disallowedWord": "\"{{ word }}\" is not allowed in test titles."
        },
        "type": "suggestion",
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreTypeOfDescribeName": {
                "type": "boolean",
                "default": false
              },
              "disallowedWords": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code"
      }
    }
  },
  "lodash": {
    "lodash/callback-binding": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/callback-binding.md"
        }
      }
    },
    "lodash/chain-style": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/chain-style.md"
        },
        "schema": [
          {
            "enum": [
              "as-needed",
              "implicit",
              "explicit"
            ]
          }
        ]
      }
    },
    "lodash/chaining": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/chaining.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never",
              "implicit"
            ]
          },
          {
            "type": "integer",
            "minimum": 2
          }
        ],
        "messages": {
          "single": "Do not use chain syntax for single method",
          "never": "Prefer composition to Lodash chaining",
          "always": "Prefer chaining to composition"
        }
      }
    },
    "lodash/collection-method-value": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/collection-method-value.md"
        }
      }
    },
    "lodash/collection-ordering": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/collection-ordering.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "method": {
                "enum": [
                  "sortBy",
                  "orderBy",
                  "orderByExplicit"
                ]
              },
              "useArray": {
                "enum": [
                  "always",
                  "as-needed"
                ]
              }
            }
          }
        ],
        "messages": {
          "sortBy": "Use _.sortBy for sorting only in ascending order.",
          "orderBy": "Use _.orderBy for ordering in ascending order.",
          "omitOrders": "Omit the order when all orders are ascending.",
          "orderByExplicit": "Use _.orderBy and specify the orders.",
          "useArrayAlways": "Wrap ordering iteratees with arrays in _.{{method}}.",
          "useArrayAsNeeded": "Do not wrap a single ordering iteratee with array in _.{{method}}."
        }
      }
    },
    "lodash/collection-return": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/collection-return.md"
        }
      }
    },
    "lodash/consistent-compose": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/consistent-compose.md"
        },
        "schema": [
          {
            "enum": [
              "pipe",
              "compose",
              "flow",
              "flowRight"
            ]
          }
        ]
      }
    },
    "lodash/identity-shorthand": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/identity-shorthand.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "lodash/import-scope": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/import-scope.md"
        },
        "schema": [
          {
            "enum": [
              "method",
              "member",
              "full",
              "method-package"
            ]
          }
        ]
      }
    },
    "lodash/matches-prop-shorthand": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/matches-prop-shorthand.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "onlyLiterals": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "lodash/matches-shorthand": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/matches-shorthand.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "integer",
            "minimum": 1
          },
          {
            "type": "boolean"
          },
          {
            "type": "object",
            "properties": {
              "onlyLiterals": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "lodash/no-commit": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/no-commit.md"
        }
      }
    },
    "lodash/no-double-unwrap": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/no-double-unwrap.md"
        },
        "fixable": "code"
      }
    },
    "lodash/no-extra-args": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/no-extra-args.md"
        }
      }
    },
    "lodash/no-unbound-this": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/no-unbound-this.md"
        }
      }
    },
    "lodash/path-style": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/path-style.md"
        },
        "schema": [
          {
            "enum": [
              "as-needed",
              "array",
              "string"
            ]
          }
        ],
        "fixable": "code",
        "messages": {
          "stringForSimple": "Use a string for simple paths",
          "arrayForVars": "Use an array for paths with variables",
          "array": "Use an array for paths",
          "string": "Use a string for paths"
        }
      }
    },
    "lodash/prefer-compact": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-compact.md"
        }
      }
    },
    "lodash/prefer-constant": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-constant.md"
        },
        "schema": [
          {
            "type": "boolean"
          },
          {
            "type": "boolean"
          }
        ]
      }
    },
    "lodash/prefer-filter": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-filter.md"
        },
        "schema": [
          {
            "type": "integer"
          }
        ]
      }
    },
    "lodash/prefer-find": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-find.md"
        }
      }
    },
    "lodash/prefer-flat-map": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-flat-map.md"
        }
      }
    },
    "lodash/prefer-get": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-get.md"
        },
        "schema": [
          {
            "type": "integer",
            "minimum": 2
          }
        ]
      }
    },
    "lodash/prefer-immutable-method": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-immutable-method.md"
        }
      }
    },
    "lodash/prefer-includes": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-includes.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "includeNative": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "lodash/prefer-invoke-map": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-invoke-map.md"
        }
      }
    },
    "lodash/prefer-is-nil": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-is-nil.md"
        }
      }
    },
    "lodash/prefer-lodash-chain": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-lodash-chain.md"
        }
      }
    },
    "lodash/prefer-lodash-method": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-lodash-method.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoredMethods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoredObjects": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "lodash/prefer-lodash-typecheck": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-lodash-typecheck.md"
        }
      }
    },
    "lodash/prefer-map": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-map.md"
        }
      }
    },
    "lodash/prefer-matches": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-matches.md"
        },
        "schema": [
          {
            "type": "integer",
            "minimum": 2
          }
        ]
      }
    },
    "lodash/prefer-noop": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-noop.md"
        }
      }
    },
    "lodash/prefer-over-quantifier": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-over-quantifier.md"
        }
      }
    },
    "lodash/prefer-reject": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-reject.md"
        },
        "schema": [
          {
            "type": "integer"
          }
        ]
      }
    },
    "lodash/prefer-some": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-some.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "includeNative": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "lodash/prefer-startswith": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-startswith.md"
        }
      }
    },
    "lodash/prefer-thru": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-thru.md"
        }
      }
    },
    "lodash/prefer-times": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-times.md"
        }
      }
    },
    "lodash/prefer-wrapper-method": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prefer-wrapper-method.md"
        }
      }
    },
    "lodash/preferred-alias": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/preferred-alias.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ingoreMethods": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "lodash/prop-shorthand": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/prop-shorthand.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "lodash/unwrap": {
      "meta": {
        "docs": {
          "url": "https://github.com/wix/eslint-plugin-lodash/blob/v7.1.0/docs/rules/unwrap.md"
        }
      }
    }
  },
  "lodash-fp": {
    "lodash-fp/consistent-compose": {
      "meta": {
        "schema": [
          {
            "type": "string",
            "enum": [
              "compose",
              "flow",
              "flowRight",
              "pipe"
            ]
          }
        ],
        "docs": {
          "description": "Enforce a consistent composition method.",
          "recommended": "off"
        }
      }
    },
    "lodash-fp/consistent-name": {
      "meta": {
        "schema": [
          {
            "type": "string"
          }
        ],
        "docs": {
          "description": "Enforce a consistent name for Lodash.",
          "recommended": [
            "error",
            "_"
          ]
        }
      }
    },
    "lodash-fp/no-argumentless-calls": {
      "meta": {
        "docs": {
          "description": "Forbid argument-less calls of Lodash methods.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-chain": {
      "meta": {
        "docs": {
          "description": "Forbid the use of [`_.chain`](https://lodash.com/docs#chain)",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-extraneous-args": {
      "meta": {
        "docs": {
          "description": "No extraneous arguments to methods with a fixed arity.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-extraneous-function-wrapping": {
      "meta": {
        "docs": {
          "description": "Avoid unnecessary function wrapping.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-extraneous-iteratee-args": {
      "meta": {
        "docs": {
          "description": "No extraneous parameters in iteratees.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-extraneous-partials": {
      "meta": {
        "docs": {
          "description": "No extraneous partials in method calls.",
          "recommended": "off"
        }
      }
    },
    "lodash-fp/no-for-each": {
      "meta": {
        "schema": [
          {
            "type": "object",
            "properties": {
              "noNative": {
                "type": "boolean"
              }
            }
          }
        ],
        "docs": {
          "description": " Forbid the use of [`_.forEach`](https://lodash.com/docs#forEach)",
          "recommended": "off"
        }
      }
    },
    "lodash-fp/no-partial-of-curried": {
      "meta": {
        "docs": {
          "description": "No use of [`_.partial`](https://lodash.com/docs#partial) on curried Lodash methods.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-single-composition": {
      "meta": {
        "docs": {
          "description": "Enforce at least two methods arguments for composition methods.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-submodule-destructuring": {
      "meta": {
        "docs": {
          "description": "Forbid destructuring of Lodash submodules.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/no-unused-result": {
      "meta": {
        "docs": {
          "description": "Enforce that the result of a Lodash method call gets used.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/prefer-compact": {
      "meta": {
        "docs": {
          "description": "Prefer [`_.compact`](https://lodash.com/docs#compact) over [`_.filter`](https://lodash.com/docs#filter) with identity function.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/prefer-composition-grouping": {
      "meta": {
        "docs": {
          "description": "Prefer grouping similar methods in composition methods.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/prefer-constant": {
      "meta": {
        "schema": [
          {
            "type": "object",
            "properties": {
              "arrowFunctions": {
                "type": "boolean"
              }
            }
          }
        ],
        "docs": {
          "description": "Prefer [`_.constant`](https://lodash.com/docs#constant) over functions returning literals.",
          "recommended": [
            "error",
            {
              "arrowFunctions": false
            }
          ]
        }
      }
    },
    "lodash-fp/prefer-flat-map": {
      "meta": {
        "docs": {
          "description": "Prefer [`_.flatMap`](https://lodash.com/docs#flatMap) over consecutive [`_.map`](https://lodash.com/docs#map) and [`_.flatten`](https://lodash.com/docs#flatten).",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/prefer-get": {
      "meta": {
        "schema": [
          {
            "type": "integer",
            "minimum": 2
          }
        ],
        "docs": {
          "description": "Prefer [`_.get`](https://lodash.com/docs#get) over multiple `&&`.",
          "recommended": "error"
        }
      }
    },
    "lodash-fp/prefer-identity": {
      "meta": {
        "schema": [
          {
            "type": "object",
            "properties": {
              "arrowFunctions": {
                "type": "boolean"
              }
            }
          }
        ],
        "docs": {
          "description": "Prefer [`_.identity`](https://lodash.com/docs#identity) over functions returning their argument.",
          "recommended": [
            "error",
            {
              "arrowFunctions": false
            }
          ]
        }
      }
    },
    "lodash-fp/preferred-alias": {
      "meta": {
        "schema": [
          {
            "type": "object",
            "properties": {
              "overrides": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "docs": {
          "description": "Limit the use of aliases.",
          "recommended": "off"
        }
      }
    },
    "lodash-fp/use-fp": {
      "meta": {
        "docs": {
          "description": "Use lodash/fp instead of Lodash.",
          "recommended": "error"
        }
      }
    }
  },
  "react": {
    "react/boolean-prop-naming": {
      "meta": {
        "docs": {
          "category": "Stylistic Issues",
          "description": "Enforces consistent naming for boolean props",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md"
        },
        "schema": [
          {
            "additionalProperties": false,
            "properties": {
              "propTypeNames": {
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
              },
              "rule": {
                "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                "minLength": 1,
                "type": "string"
              },
              "message": {
                "minLength": 1,
                "type": "string"
              },
              "validateNested": {
                "default": false,
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      }
    },
    "react/button-has-type": {
      "meta": {
        "docs": {
          "description": "Forbid \"button\" element without an explicit \"type\" attribute",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/button-has-type.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "button": {
                "default": true,
                "type": "boolean"
              },
              "submit": {
                "default": true,
                "type": "boolean"
              },
              "reset": {
                "default": true,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/default-props-match-prop-types": {
      "meta": {
        "docs": {
          "description": "Enforce all defaultProps are defined and not \"required\" in propTypes.",
          "category": "Best Practices",
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowRequiredDefaults": {
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/destructuring-assignment": {
      "meta": {
        "docs": {
          "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md"
        },
        "schema": [
          {
            "type": "string",
            "enum": [
              "always",
              "never"
            ]
          },
          {
            "type": "object",
            "properties": {
              "ignoreClassFields": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/display-name": {
      "meta": {
        "docs": {
          "description": "Prevent missing displayName in a React component definition",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/display-name.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreTranspilerName": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/forbid-component-props": {
      "meta": {
        "docs": {
          "description": "Forbid certain props on components",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "forbid": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "propName": {
                          "type": "string"
                        },
                        "allowedFor": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string"
                          }
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "react/forbid-dom-props": {
      "meta": {
        "docs": {
          "description": "Forbid certain props on DOM Nodes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "forbid": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "propName": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "minLength": 1
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/forbid-elements": {
      "meta": {
        "docs": {
          "description": "Forbid certain elements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "forbid": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "element": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "element"
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/forbid-foreign-prop-types": {
      "meta": {
        "docs": {
          "description": "Forbid using another component's propTypes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowInPropTypes": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/forbid-prop-types": {
      "meta": {
        "docs": {
          "description": "Forbid certain propTypes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "forbid": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "checkContextTypes": {
                "type": "boolean"
              },
              "checkChildContextTypes": {
                "type": "boolean"
              }
            },
            "additionalProperties": true
          }
        ]
      }
    },
    "react/function-component-definition": {
      "meta": {
        "docs": {
          "description": "Standardize the way function component get defined",
          "category": "Stylistic issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "namedComponents": {
                "enum": [
                  "function-declaration",
                  "arrow-function",
                  "function-expression"
                ]
              },
              "unnamedComponents": {
                "enum": [
                  "arrow-function",
                  "function-expression"
                ]
              }
            }
          }
        ]
      }
    },
    "react/jsx-boolean-value": {
      "meta": {
        "docs": {
          "description": "Enforce boolean attributes notation in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ],
              "additionalItems": false
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always"
                  ]
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "never": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "uniqueItems": true
                    }
                  }
                }
              ],
              "additionalItems": false
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "never"
                  ]
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "always": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "uniqueItems": true
                    }
                  }
                }
              ],
              "additionalItems": false
            }
          ]
        }
      }
    },
    "react/jsx-child-element-spacing": {
      "meta": {
        "docs": {
          "description": "Ensures inline tags are not rendered without spaces between them",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md"
        },
        "fixable": null,
        "schema": [
          {
            "type": "object",
            "properties": {},
            "default": {},
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-closing-bracket-location": {
      "meta": {
        "docs": {
          "description": "Validate closing bracket location in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "after-props",
                  "props-aligned",
                  "tag-aligned",
                  "line-aligned"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "location": {
                    "enum": [
                      "after-props",
                      "props-aligned",
                      "tag-aligned",
                      "line-aligned"
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "nonEmpty": {
                    "enum": [
                      "after-props",
                      "props-aligned",
                      "tag-aligned",
                      "line-aligned",
                      false
                    ]
                  },
                  "selfClosing": {
                    "enum": [
                      "after-props",
                      "props-aligned",
                      "tag-aligned",
                      "line-aligned",
                      false
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "react/jsx-closing-tag-location": {
      "meta": {
        "docs": {
          "description": "Validate closing tag location for multiline JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md"
        },
        "fixable": "whitespace"
      }
    },
    "react/jsx-curly-spacing": {
      "meta": {
        "docs": {
          "description": "Enforce or disallow spaces inside of curly braces in JSX attributes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md"
        },
        "fixable": "code",
        "schema": {
          "definitions": {
            "basicConfig": {
              "type": "object",
              "properties": {
                "when": {
                  "enum": [
                    "always",
                    "never"
                  ]
                },
                "allowMultiline": {
                  "type": "boolean"
                },
                "spacing": {
                  "type": "object",
                  "properties": {
                    "objectLiterals": {
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  }
                }
              }
            },
            "basicConfigOrBoolean": {
              "oneOf": [
                {
                  "$ref": "#/definitions/basicConfig"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "type": "array",
          "items": [
            {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "$ref": "#/definitions/basicConfig"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "attributes": {
                          "$ref": "#/definitions/basicConfigOrBoolean"
                        },
                        "children": {
                          "$ref": "#/definitions/basicConfigOrBoolean"
                        }
                      }
                    }
                  ]
                },
                {
                  "enum": [
                    "always",
                    "never"
                  ]
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "allowMultiline": {
                  "type": "boolean"
                },
                "spacing": {
                  "type": "object",
                  "properties": {
                    "objectLiterals": {
                      "enum": [
                        "always",
                        "never"
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "react/jsx-curly-newline": {
      "meta": {
        "type": "layout",
        "docs": {
          "description": "Enforce consistent line breaks inside jsx curly",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "consistent",
                  "never"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "singleline": {
                    "enum": [
                      "consistent",
                      "require",
                      "forbid"
                    ]
                  },
                  "multiline": {
                    "enum": [
                      "consistent",
                      "require",
                      "forbid"
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "expectedBefore": "Expected newline before '}'.",
          "expectedAfter": "Expected newline after '{'.",
          "unexpectedBefore": "Unexpected newline before '{'.",
          "unexpectedAfter": "Unexpected newline after '}'."
        }
      }
    },
    "react/jsx-equals-spacing": {
      "meta": {
        "docs": {
          "description": "Disallow or enforce spaces around equal signs in JSX attributes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "react/jsx-filename-extension": {
      "meta": {
        "docs": {
          "description": "Restrict file extensions that may contain JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "extensions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-first-prop-new-line": {
      "meta": {
        "docs": {
          "description": "Ensure proper position of the first property in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "always",
              "never",
              "multiline",
              "multiline-multiprop"
            ]
          }
        ]
      }
    },
    "react/jsx-handler-names": {
      "meta": {
        "docs": {
          "description": "Enforce event handler naming conventions in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md"
        },
        "schema": [
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "eventHandlerPrefix": {
                    "type": "string"
                  },
                  "eventHandlerPropPrefix": {
                    "type": "string"
                  },
                  "checkLocalVariables": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "eventHandlerPrefix": {
                    "type": "string"
                  },
                  "eventHandlerPropPrefix": {
                    "type": "boolean",
                    "enum": [
                      false
                    ]
                  },
                  "checkLocalVariables": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "eventHandlerPrefix": {
                    "type": "boolean",
                    "enum": [
                      false
                    ]
                  },
                  "eventHandlerPropPrefix": {
                    "type": "string"
                  },
                  "checkLocalVariables": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "checkLocalVariables": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      }
    },
    "react/jsx-indent": {
      "meta": {
        "docs": {
          "description": "Validate JSX indentation",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "tab"
                ]
              },
              {
                "type": "integer"
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "checkAttributes": {
                "type": "boolean"
              },
              "indentLogicalExpressions": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-indent-props": {
      "meta": {
        "docs": {
          "description": "Validate props indentation in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "tab",
                  "first"
                ]
              },
              {
                "type": "integer"
              }
            ]
          }
        ]
      }
    },
    "react/jsx-key": {
      "meta": {
        "docs": {
          "description": "Report missing `key` props in iterators/collection literals",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-key.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "checkFragmentShorthand": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-max-depth": {
      "meta": {
        "docs": {
          "description": "Validate JSX maximum depth",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "max": {
                "type": "integer",
                "minimum": 0
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-max-props-per-line": {
      "meta": {
        "docs": {
          "description": "Limit maximum of props on a single line in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "maximum": {
                "type": "integer",
                "minimum": 1
              },
              "when": {
                "type": "string",
                "enum": [
                  "always",
                  "multiline"
                ]
              }
            }
          }
        ]
      }
    },
    "react/jsx-no-bind": {
      "meta": {
        "docs": {
          "description": "Prevents usage of Function.prototype.bind and arrow functions in React component props",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowArrowFunctions": {
                "default": false,
                "type": "boolean"
              },
              "allowBind": {
                "default": false,
                "type": "boolean"
              },
              "allowFunctions": {
                "default": false,
                "type": "boolean"
              },
              "ignoreRefs": {
                "default": false,
                "type": "boolean"
              },
              "ignoreDOMComponents": {
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-no-comment-textnodes": {
      "meta": {
        "docs": {
          "description": "Comments inside children section of tag should be placed inside braces",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {},
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-no-duplicate-props": {
      "meta": {
        "docs": {
          "description": "Enforce no duplicate props",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreCase": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-no-literals": {
      "meta": {
        "docs": {
          "description": "Prevent using string literals in React component definition",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "noStrings": {
                "type": "boolean"
              },
              "allowedStrings": {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "type": "string"
                }
              },
              "ignoreProps": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-no-script-url": {
      "meta": {
        "docs": {
          "description": "Forbid `javascript:` URLs",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md"
        },
        "schema": [
          {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "props": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "uniqueItems": true
                  }
                }
              },
              "required": [
                "name",
                "props"
              ],
              "additionalProperties": false
            }
          }
        ]
      }
    },
    "react/jsx-no-target-blank": {
      "meta": {
        "docs": {
          "description": "Forbid `target=\"_blank\"` attribute without `rel=\"noreferrer\"`",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowReferrer": {
                "type": "boolean"
              },
              "enforceDynamicLinks": {
                "enum": [
                  "always",
                  "never"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-no-useless-fragment": {
      "meta": {
        "type": "suggestion",
        "fixable": "code",
        "docs": {
          "description": "Disallow unnecessary fragments",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md"
        },
        "messages": {
          "NeedsMoreChidren": "Fragments should contain more than one child - otherwise, there‘s no need for a Fragment at all.",
          "ChildOfHtmlElement": "Passing a fragment to an HTML element is useless."
        }
      }
    },
    "react/jsx-one-expression-per-line": {
      "meta": {
        "docs": {
          "description": "Limit to one expression per line in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "enum": [
                  "none",
                  "literal",
                  "single-child"
                ]
              }
            },
            "default": {
              "allow": "none"
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-no-undef": {
      "meta": {
        "docs": {
          "description": "Disallow undeclared variables in JSX",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowGlobals": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-curly-brace-presence": {
      "meta": {
        "docs": {
          "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enfore JSX expressions on literals in JSX children or attributes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "props": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  },
                  "children": {
                    "enum": [
                      "always",
                      "never",
                      "ignore"
                    ]
                  }
                },
                "additionalProperties": false
              },
              {
                "enum": [
                  "always",
                  "never",
                  "ignore"
                ]
              }
            ]
          }
        ]
      }
    },
    "react/jsx-pascal-case": {
      "meta": {
        "docs": {
          "description": "Enforce PascalCase for user-defined JSX components",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAllCaps": {
                "type": "boolean"
              },
              "ignore": {
                "type": "array"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-fragments": {
      "meta": {
        "docs": {
          "description": "Enforce shorthand or standard form for React fragments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "syntax",
              "element"
            ]
          }
        ]
      }
    },
    "react/jsx-props-no-multi-spaces": {
      "meta": {
        "docs": {
          "description": "Disallow multiple spaces between inline JSX props",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md"
        },
        "fixable": "code",
        "schema": []
      }
    },
    "react/jsx-props-no-spreading": {
      "meta": {
        "docs": {
          "description": "Prevent JSX prop spreading",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md"
        },
        "schema": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "html": {
                    "enum": [
                      "enforce",
                      "ignore"
                    ]
                  },
                  "custom": {
                    "enum": [
                      "enforce",
                      "ignore"
                    ]
                  },
                  "exceptions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "uniqueItems": true
                    }
                  }
                }
              },
              {
                "not": {
                  "type": "object",
                  "required": [
                    "html",
                    "custom"
                  ],
                  "properties": {
                    "html": {
                      "enum": [
                        "ignore"
                      ]
                    },
                    "custom": {
                      "enum": [
                        "ignore"
                      ]
                    },
                    "exceptions": {
                      "type": "array",
                      "minItems": 0,
                      "maxItems": 0
                    }
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "react/jsx-sort-default-props": {
      "meta": {
        "docs": {
          "description": "Enforce default props alphabetical sorting",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreCase": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-sort-props": {
      "meta": {
        "docs": {
          "description": "Enforce props alphabetical sorting",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "callbacksLast": {
                "type": "boolean"
              },
              "shorthandFirst": {
                "type": "boolean"
              },
              "shorthandLast": {
                "type": "boolean"
              },
              "ignoreCase": {
                "type": "boolean"
              },
              "noSortAlphabetically": {
                "type": "boolean"
              },
              "reservedFirst": {
                "type": [
                  "array",
                  "boolean"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-space-before-closing": {
      "meta": {
        "deprecated": true,
        "docs": {
          "description": "Validate spacing before closing bracket in JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md"
        },
        "fixable": "code",
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "react/jsx-tag-spacing": {
      "meta": {
        "docs": {
          "description": "Validate whitespace in and around the JSX opening and closing brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "closingSlash": {
                "enum": [
                  "always",
                  "never",
                  "allow"
                ]
              },
              "beforeSelfClosing": {
                "enum": [
                  "always",
                  "never",
                  "allow"
                ]
              },
              "afterOpening": {
                "enum": [
                  "always",
                  "allow-multiline",
                  "never",
                  "allow"
                ]
              },
              "beforeClosing": {
                "enum": [
                  "always",
                  "never",
                  "allow"
                ]
              }
            },
            "default": {
              "closingSlash": "never",
              "beforeSelfClosing": "always",
              "afterOpening": "never",
              "beforeClosing": "allow"
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/jsx-uses-react": {
      "meta": {
        "docs": {
          "description": "Prevent React to be marked as unused",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md"
        },
        "schema": []
      }
    },
    "react/jsx-uses-vars": {
      "meta": {
        "docs": {
          "description": "Prevent variables used in JSX to be marked as unused",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md"
        },
        "schema": []
      }
    },
    "react/jsx-wrap-multilines": {
      "meta": {
        "docs": {
          "description": "Prevent missing parentheses around multilines JSX",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "declaration": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              },
              "assignment": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              },
              "return": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              },
              "arrow": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              },
              "condition": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              },
              "logical": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              },
              "prop": {
                "enum": [
                  true,
                  false,
                  "ignore",
                  "parens",
                  "parens-new-line"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-access-state-in-setstate": {
      "meta": {
        "docs": {
          "description": "Reports when this.state is accessed within setState",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md"
        }
      }
    },
    "react/no-adjacent-inline-elements": {
      "ERROR": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.",
      "meta": {
        "docs": {
          "description": "Prevent adjacent inline elements not separated by whitespace.",
          "category": "Best Practices",
          "recommended": false
        },
        "schema": []
      }
    },
    "react/no-array-index-key": {
      "meta": {
        "docs": {
          "description": "Prevent usage of Array index in keys",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md"
        },
        "schema": []
      }
    },
    "react/no-children-prop": {
      "meta": {
        "docs": {
          "description": "Prevent passing of children as props.",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md"
        },
        "schema": []
      }
    },
    "react/no-danger": {
      "meta": {
        "docs": {
          "description": "Prevent usage of dangerous JSX props",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-danger.md"
        },
        "schema": []
      }
    },
    "react/no-danger-with-children": {
      "meta": {
        "docs": {
          "description": "Report when a DOM element is using both children and dangerouslySetInnerHTML",
          "category": "",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md"
        },
        "schema": []
      }
    },
    "react/no-deprecated": {
      "meta": {
        "docs": {
          "description": "Prevent usage of deprecated methods",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md"
        },
        "schema": []
      }
    },
    "react/no-did-mount-set-state": {
      "meta": {
        "docs": {
          "description": "Prevent usage of setState in componentDidMount",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md"
        },
        "schema": [
          {
            "enum": [
              "disallow-in-func"
            ]
          }
        ]
      }
    },
    "react/no-did-update-set-state": {
      "meta": {
        "docs": {
          "description": "Prevent usage of setState in componentDidUpdate",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md"
        },
        "schema": [
          {
            "enum": [
              "disallow-in-func"
            ]
          }
        ]
      }
    },
    "react/no-direct-mutation-state": {
      "meta": {
        "docs": {
          "description": "Prevent direct mutation of this.state",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md"
        }
      }
    },
    "react/no-find-dom-node": {
      "meta": {
        "docs": {
          "description": "Prevent usage of findDOMNode",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md"
        },
        "schema": []
      }
    },
    "react/no-is-mounted": {
      "meta": {
        "docs": {
          "description": "Prevent usage of isMounted",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md"
        },
        "schema": []
      }
    },
    "react/no-multi-comp": {
      "meta": {
        "docs": {
          "description": "Prevent multiple component definition per file",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreStateless": {
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-set-state": {
      "meta": {
        "docs": {
          "description": "Prevent usage of setState",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-set-state.md"
        },
        "schema": []
      }
    },
    "react/no-string-refs": {
      "meta": {
        "docs": {
          "description": "Prevent string definitions for references and prevent referencing this.refs",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "noTemplateLiterals": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-redundant-should-component-update": {
      "meta": {
        "docs": {
          "description": "Flag shouldComponentUpdate when extending PureComponent",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md"
        },
        "schema": []
      }
    },
    "react/no-render-return-value": {
      "meta": {
        "docs": {
          "description": "Prevent usage of the return value of React.render",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md"
        },
        "schema": []
      }
    },
    "react/no-this-in-sfc": {
      "meta": {
        "docs": {
          "description": "Report \"this\" being used in stateless components",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md"
        },
        "schema": []
      }
    },
    "react/no-typos": {
      "meta": {
        "docs": {
          "description": "Prevent common typos",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-typos.md"
        },
        "schema": []
      }
    },
    "react/no-unescaped-entities": {
      "meta": {
        "docs": {
          "description": "Detect unescaped HTML entities, which might represent malformed tags",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "forbid": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "char": {
                          "type": "string"
                        },
                        "alternatives": {
                          "type": "array",
                          "uniqueItems": true,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-unknown-property": {
      "meta": {
        "docs": {
          "description": "Prevent usage of unknown DOM property",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-unsafe": {
      "meta": {
        "docs": {
          "description": "Prevent usage of unsafe lifecycle methods",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "checkAliases": {
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-unused-prop-types": {
      "meta": {
        "docs": {
          "description": "Prevent definitions of unused prop types",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "customValidators": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "skipShapeProps": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/no-unused-state": {
      "meta": {
        "docs": {
          "description": "Prevent definition of unused state fields",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md"
        },
        "schema": []
      }
    },
    "react/no-will-update-set-state": {
      "meta": {
        "docs": {
          "description": "Prevent usage of setState in componentWillUpdate",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md"
        },
        "schema": [
          {
            "enum": [
              "disallow-in-func"
            ]
          }
        ]
      }
    },
    "react/prefer-es6-class": {
      "meta": {
        "docs": {
          "description": "Enforce ES5 or ES6 class for React Components",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "react/prefer-read-only-props": {
      "meta": {
        "docs": {
          "description": "Require read-only props.",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md"
        },
        "fixable": "code",
        "schema": []
      }
    },
    "react/prefer-stateless-function": {
      "meta": {
        "docs": {
          "description": "Enforce stateless components to be written as a pure function",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignorePureComponents": {
                "default": false,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/prop-types": {
      "meta": {
        "docs": {
          "description": "Prevent missing props validation in a React component definition",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/prop-types.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignore": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "customValidators": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "skipUndeclared": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/react-in-jsx-scope": {
      "meta": {
        "docs": {
          "description": "Prevent missing React when using JSX",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md"
        },
        "schema": []
      }
    },
    "react/require-default-props": {
      "meta": {
        "docs": {
          "description": "Enforce a defaultProps definition for every prop that is not a required prop.",
          "category": "Best Practices",
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/require-default-props.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "forbidDefaultForRequired": {
                "type": "boolean"
              },
              "ignoreFunctionalComponents": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/require-optimization": {
      "meta": {
        "docs": {
          "description": "Enforce React components to have a shouldComponentUpdate method",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/require-optimization.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowDecorators": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/require-render-return": {
      "meta": {
        "docs": {
          "description": "Enforce ES5 or ES6 class for returning value in render function",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/require-render-return.md"
        },
        "schema": [
          {}
        ]
      }
    },
    "react/self-closing-comp": {
      "meta": {
        "docs": {
          "description": "Prevent extra closing tags for components without children",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "component": {
                "default": true,
                "type": "boolean"
              },
              "html": {
                "default": true,
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/sort-comp": {
      "meta": {
        "docs": {
          "description": "Enforce component methods order",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/sort-comp.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "order": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "groups": {
                "type": "object",
                "patternProperties": {
                  "^.*$": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "defaultConfig": {
        "order": [
          "static-methods",
          "lifecycle",
          "everything-else",
          "render"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "state",
            "getInitialState",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount"
          ]
        }
      }
    },
    "react/sort-prop-types": {
      "meta": {
        "docs": {
          "description": "Enforce propTypes declarations alphabetical sorting",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "requiredFirst": {
                "type": "boolean"
              },
              "callbacksLast": {
                "type": "boolean"
              },
              "ignoreCase": {
                "type": "boolean"
              },
              "noSortAlphabetically": {
                "type": "boolean"
              },
              "sortShapeProp": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/state-in-constructor": {
      "meta": {
        "docs": {
          "description": "State initialization in an ES6 class component should be in a constructor",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md"
        },
        "schema": [
          {
            "enum": [
              "always",
              "never"
            ]
          }
        ]
      }
    },
    "react/static-property-placement": {
      "meta": {
        "docs": {
          "description": "Defines where React component static properties should be positioned.",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md"
        },
        "fixable": null,
        "schema": [
          {
            "enum": [
              "static public field",
              "static getter",
              "property assignment"
            ]
          },
          {
            "type": "object",
            "properties": {
              "propTypes": {
                "enum": [
                  "static public field",
                  "static getter",
                  "property assignment"
                ]
              },
              "defaultProps": {
                "enum": [
                  "static public field",
                  "static getter",
                  "property assignment"
                ]
              },
              "childContextTypes": {
                "enum": [
                  "static public field",
                  "static getter",
                  "property assignment"
                ]
              },
              "contextTypes": {
                "enum": [
                  "static public field",
                  "static getter",
                  "property assignment"
                ]
              },
              "contextType": {
                "enum": [
                  "static public field",
                  "static getter",
                  "property assignment"
                ]
              },
              "displayName": {
                "enum": [
                  "static public field",
                  "static getter",
                  "property assignment"
                ]
              }
            },
            "additionalProperties": false
          }
        ]
      }
    },
    "react/style-prop-object": {
      "meta": {
        "docs": {
          "description": "Enforce style prop value is an object",
          "category": "",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "additionalItems": false,
                "uniqueItems": true
              }
            }
          }
        ]
      }
    },
    "react/void-dom-elements-no-children": {
      "meta": {
        "docs": {
          "description": "Prevent passing of children to void DOM elements (e.g. `<br />`).",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md"
        },
        "schema": []
      }
    }
  }
}
